Script started on 2020-11-08 23:01:32-05:00 [TERM="xterm" TTY="/dev/pts/0" COLUMNS="151" LINES="71"]
rgeary1@remote00:~/i220a/submit/lab10$ SO[K[KSORRY< FORGOT TO START MY SCRIPT
bash: FORGOT: No such file or directory
rgeary1@remote00:~/i220a/submit/lab10$ cd ../[K[K[Kexercises/[K
rgeary1@remote00:~/i220a/submit/lab10/exercises$ cd valgr[K[K[K[K[Kbug-program/
rgeary1@remote00:~/i220a/submit/lab10/exercises/bug-program$ cd bug-program/[3Pexercisesbug-program/[3PexercisesSORRY< FORGOT TO START MY SCRIPTgit push[Kmerge lab9 -m 'merged lab9'[12Pcheckout master[6Pstatus -smerge -m 'merged master' master[18Pcheckout lab9pull[Kcheckout lab9merge -m 'merged master' masterstatus -s[Kcheckout mastermerge lab9 -m 'merged lab9'push[KSORRY< FORGOT TO START MY SCRIPT[20Pcd exercisesbug-program/[K[Krgeary1@remote00:~/i220a/submit/lab10/exercises/bug-program$ [Krgeary1@remote00:~/i220a/submit/lab10/exercises/bug-program$ vim bug-program.c
[?1000h[?2004h[?1049h[22;0;0t[?1h=[?2004h[1;71r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[71;1H"bug-program.c" 77L, 2219C[2;1Hâ–½[6n[2;1H  [1;1H[>c]10;?]11;?[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([33msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k));

  [33mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [33mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [33mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m; p = p->succ) {
    free(p); [34m//free KeyValue struct[m
    free(p->value);
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
    [31m"twas"[m, [31m"brillig"[m, [31m"and"[m, [31m"the"[m, [31m"slithy"[m, [31m"toves"[m,
    [31m"did"[m, [31m"gyre"[m, [31m"and"[m, [31m"gimble"[m, [31m"in"[m, [31m"the"[m, [31m"wabe"[m,
    [31m"all"[m, [31m"mimsy"[m, [31m"were"[m, [31m"the"[m, [31m"borogoves"[m,
    [31m"and"[m, [31m"the"[m, [31m"mome"[m, [31m"raths"[m, [31m"outgrabe"[m,
  };
  [32mstruct[m KeyValue *p = [31mNULL[m;
  [33mfor[m ([32mint[m i = [31m0[m; i < [33msizeof[m(keys)/[33msizeof[m(keys[[31m0[m]); i++) {
    p = add_key_value(p, keys[i], i);
  }
  [33mreturn[m p;
}

[34m/** Print out all the words in the first verse of Carroll's Jabberwocky
 *  paired with their index in the verse.
 */[m
[32mint[m main() {[71;100H45,19[9CTop[45;19H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[27m[23m[29m[m[H[2J[?25l[1;1H[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m
[1m[34m#include [m[1m[35m<string.h>[m

[1m[36m/** A struct used to form a linear chain of key-value pairs. */[m
[1m[32mstruct[m KeyValue {
  [1m[32mconst[m [1m[32mchar[m *key;[7C[1m[36m/** string key */[m
  [1m[32mint[m value;[13C[1m[36m/** integer value */[m
  [1m[32mstruct[m KeyValue *succ; [1m[36m/** next key-value in chain */[m
};

[1m[36m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *
add_key_value([1m[32mstruct[m KeyValue *keyValues, [1m[32mconst[m [1m[32mchar[m *k, [1m[32mint[m v)
{
  [1m[36m//allocate storage for new KeyValue struct[m
  [1m[32mstruct[m KeyValue *kv = malloc([1m[33msizeof[m([1m[32mstruct[m KeyValue *));

  [1m[36m//allocate storage for string pointed to by k[m
  [1m[32mchar[m *s = malloc(strlen(k));

  [1m[33mif[m (kv == [1m[35mNULL[m || s == [1m[35mNULL[m) { [1m[36m//check if allocations succeeded[m
    fprintf([1m[35mstderr[m, [1m[35m"malloc failure: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));
    exit([1m[35m1[m);
  }
  strcpy(s, k);  [1m[36m//copy string k into newly allocated memory pointed to by s

[m  [1m[36m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [1m[33mreturn[m kv;
}

[1m[36m/** Free all the key-value's in keyValues. */[m
[1m[32mstatic[m [1m[32mvoid[m
free_key_values([1m[32mstruct[m KeyValue *keyValues)
{
  [1m[36m//go thru chain of keyValues[m
  [1m[33mfor[m ([1m[32mstruct[m KeyValue *p = keyValues; p != [1m[35mNULL[m; p = p->succ) {
    free(p); [1m[36m//free KeyValue struct[m
    free(p->value);
  }
}

[1m[36m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *
make_key_values([1m[32mvoid[m) {
  [1m[32mconst[m [1m[32mchar[m *keys[] = {
    [1m[35m"twas"[m, [1m[35m"brillig"[m, [1m[35m"and"[m, [1m[35m"the"[m, [1m[35m"slithy"[m, [1m[35m"toves"[m,
    [1m[35m"did"[m, [1m[35m"gyre"[m, [1m[35m"and"[m, [1m[35m"gimble"[m, [1m[35m"in"[m, [1m[35m"the"[m, [1m[35m"wabe"[m,
    [1m[35m"all"[m, [1m[35m"mimsy"[m, [1m[35m"were"[m, [1m[35m"the"[m, [1m[35m"borogoves"[m,
    [1m[35m"and"[m, [1m[35m"the"[m, [1m[35m"mome"[m, [1m[35m"raths"[m, [1m[35m"outgrabe"[m,
  };
  [1m[32mstruct[m KeyValue *p = [1m[35mNULL[m;
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < [1m[33msizeof[m(keys)/[1m[33msizeof[m(keys[[1m[35m0[m]); i++) {
    p = add_key_value(p, keys[i], i);
  }
  [1m[33mreturn[m p;
}

[1m[36m/** Print out all the words in the first verse of Carroll's Jabberwocky
 *  paired with their index in the verse.
 */[m
[1m[32mint[m main() {[71;100H45,19[9CTop"bug-program.c" 77L, 2219C[45;19H[?25h[?25l[43;7H[46m([54C)[m[71;101H3,62[43;62H[?25h[?25l[71;90Hi[43;62H[71;90H [43;62H[71;1H[1m-- INSERT --[m[71;13H[K[71;100H43,62[9CTop[43;62H[?25h[?25l)[46m [m{[43;64H[K[43;61H[46m)[m [71;104H1[43;61H[?25h[?25l)[46m [m{[43;63H[K[43;60H[46m)[m [71;104H0[43;60H[?25h[?25l)[46m [m{[43;62H[K[43;59H[46m)[m [71;103H59[43;59H[?25h[?25l)[46m [m{[43;61H[K[43;58H[46m)[m [71;104H8[43;58H[?25h[?25l)[46m [m{[43;60H[K[43;57H[46m)[m [71;104H7[43;57H[?25h[?25l)[46m [m{[43;59H[K[43;56H[46m)[m [71;104H6[43;56H[?25h[?25l)[46m [m{[43;58H[K[43;55H[46m)[m [71;104H5[43;55H[?25h[?25l)[46m [m{[43;57H[K[43;54H[46m)[m [71;104H4[43;54H[?25h[?25l)[46m [m{[43;56H[K[43;53H[46m)[m [71;104H3[43;53H[?25h[?25l)[46m [m{[43;55H[K[43;52H[46m)[m [71;104H2[43;52H[?25h[?25l)[46m [m{[43;54H[K[43;51H[46m)[m [71;104H1[43;51H[?25h[?25l)[46m [m{[43;53H[K[43;50H[46m)[m [71;104H0[43;50H[?25h[?25l[43;7H([42C)[71;101H4,4 [44;4H[?25h[?25l[71;103H5[44;5H[?25h[?25l[45;70r[45;1H[L[1;71r[44;5H[K[45;11Hfree(p); [1m[36m//free KeyValue struct[m[71;100H[K[71;100H45,4-11[7CTop[45;11H[?25h[?25l[71;101H4,5   [44;5H[?25h[?25l[71;101H5,4-11[45;11H[?25h[?25lfree(p); [1m[36m//free KeyValue struct[m[45;41H[K[71;103H3-10[45;10H[?25h[?25lfree(p); [1m[36m//free KeyValue struct[m[45;40H[K[71;103H2-9 [45;9H[?25h[?25lfree(p); [1m[36m//free KeyValue struct[m[45;32H[K[71;103H1  [45;1H[?25h[?25l[44;70r[70;1H
[1;71r[44;1H    free(p); [1m[36m//free KeyValue struct[m[70;1H[1m[32mint[m main() {[71;100H[K[71;100H44,5[10CTop[44;5H[?25h[?25l[45;70r[45;1H[L[1;71r[44;5H[K[45;11Hfree(p); [1m[36m//free KeyValue struct[m[71;100H[K[71;100H45,4-11[7CTop[45;11H[?25h[?25lfree(p); [1m[36m//free KeyValue struct[m[45;41H[K[71;103H3-10[45;10H[?25h[?25lfree(p); [1m[36m//free KeyValue struct[m[45;40H[K[71;103H2-9 [45;9H[?25h[?25lfree(p); [1m[36m//free KeyValue struct[m[45;32H[K[71;103H1  [45;1H[?25h[?25l        free(p); [1m[36m//free KeyValue struct[m[71;103H2-9[45;9H[?25h[?25lfree(p); [1m[36m//free KeyValue struct[m[45;32H[K[71;103H1  [45;1H[?25h[?25l[44;70r[70;1H
[1;71r[44;1H    free(p); [1m[36m//free KeyValue struct[m[70;1H[1m[32mint[m main() {[71;100H[K[71;100H44,5[10CTop[44;5H[?25h[?25l[45;70r[45;1H[L[1;71r[44;5H[K[45;11Hfree(p); [1m[36m//free KeyValue struct[m[71;100H[K[71;100H45,4-11[7CTop[45;11H[?25h[?25lfree(p); [1m[36m//free KeyValue struct[m[45;41H[K[71;103H3-10[45;10H[?25h[?25lfree(p); [1m[36m//free KeyValue struct[m[45;40H[K[71;103H2-9 [45;9H[?25h[?25lfree(p); [1m[36m//free KeyValue struct[m[45;32H[K[71;103H1  [45;1H[?25h[?25l free(p); [1m[36m//free KeyValue struct[m[71;103H2[45;2H[?25h[?25l free(p); [1m[36m//free KeyValue struct[m[71;103H3[45;3H[?25h[?25l free(p); [1m[36m//free KeyValue struct[m[71;103H4[45;4H[?25h[?25l free(p); [1m[36m//free KeyValue struct[m[71;103H5[45;5H[?25h[?25l[71;101H4[44;5H[?25h[?25ltm[71;103H7[44;7H[?25h[?25lp[71;103H8[44;8H[?25h[?25l[71;103H9[44;9H[?25h[?25l=[71;103H10[44;10H[?25h[?25l[71;104H1[44;11H[?25h[?25lk[71;104H2[44;12H[?25h[?25le[71;104H3[44;13H[?25h[?25ly[71;104H4[44;14H[?25h[?25lB[71;104H5[44;15H[?25h[?25l[44;14H[K[71;104H4[44;14H[?25h[?25lV[71;104H5[44;15H[?25h[?25la[71;104H6[44;16H[?25h[?25ll[71;104H7[44;17H[?25h[?25lu[71;104H8[44;18H[?25h[?25le[71;104H9[44;19H[?25h[?25ls[71;103H20[44;20H[?25h[?25l;[71;104H1[44;21H[?25h[?25l[45;70r[45;1H[L[1;71r[71;100H[K[71;100H45,5[10CTop[45;5H[?25h[?25lk[71;103H6[45;6H[?25h[?25le[71;103H7[45;7H[?25h[?25ly[71;103H8[45;8H[?25h[?25lV[71;103H9[45;9H[?25h[?25la[71;103H10[45;10H[?25h[?25ll[71;104H1[45;11H[?25h[?25lu[71;104H2[45;12H[?25h[?25le[71;104H3[45;13H[?25h[?25ls[71;104H4[45;14H[?25h[?25l[71;101H4,5 [44;5H[?25h[?25lstmp = keyValues;[71;103H6[44;6H[?25h[?25lttmp = keyValues;[71;103H7[44;7H[?25h[?25lrtmp = keyValues;[71;103H8[44;8H[?25h[?25lutmp = keyValues;[71;103H9[44;9H[?25h[?25lctmp = keyValues;[71;103H10[44;10H[?25h[?25lttmp = keyValues;[71;104H1[44;11H[?25h[?25l    [1m[32mstruct[m tmp = keyValues;[71;104H2[44;12H[?25h[?25lKtmp = keyValues;[71;104H3[44;13H[?25h[?25letmp = keyValues;[71;104H4[44;14H[?25h[?25lytmp = keyValues;[71;104H5[44;15H[?25h[?25lVtmp = keyValues;[71;104H6[44;16H[?25h[?25latmp = keyValues;[71;104H7[44;17H[?25h[?25lltmp = keyValues;[71;104H8[44;18H[?25h[?25lutmp = keyValues;[71;104H9[44;19H[?25h[?25letmp = keyValues;[71;103H20[44;20H[?25h[?25lstmp = keyValues;[71;104H1[44;21H[?25h[?25l tmp = keyValues;[71;104H2[44;22H[?25h[?25l*tmp = keyValues;[71;104H3[44;23H[?25h[?25l[71;101H5,14[45;14H[?25h[?25l[71;104H5[45;15H[?25h[?25l=[71;104H6[45;16H[?25h[?25l[71;104H7[45;17H[?25h[?25lk[71;104H8[45;18H[?25h[?25le[71;104H9[45;19H[?25h[?25ly[71;103H20[45;20H[?25h[?25lV[71;104H1[45;21H[?25h[?25la[71;104H2[45;22H[?25h[?25ll[71;104H3[45;23H[?25h[?25lu[71;104H4[45;24H[?25h[?25le[71;104H5[45;25H[?25h[?25ls[71;104H6[45;26H[?25h[?25l-[71;104H7[45;27H[?25h[?25l>[71;104H8[45;28H[?25h[?25ls[71;104H9[45;29H[?25h[?25lu[71;103H30[45;30H[?25h[?25lc[71;104H1[45;31H[?25h[?25lc[71;104H2[45;32H[?25h[?25l;[71;104H3[45;33H[?25h[?25l[71;103H1[45;13H[?25h[?25l[71;104H4[45;14H[?25h[?25l = keyValues->succ;[45;32H[K[71;104H3[45;13H[?25h[?25l = keyValues->succ;[45;31H[K[71;104H2[45;12H[?25h[?25l = keyValues->succ;[45;30H[K[71;104H1[45;11H[?25h[?25l = keyValues->succ;[45;29H[K[71;104H0[45;10H[?25h[?25l = keyValues->succ;[45;28H[K[71;103H9 [45;9H[?25h[?25l = keyValues->succ;[45;27H[K[71;103H8[45;8H[?25h[?25l = keyValues->succ;[45;26H[K[71;103H7[45;7H[?25h[?25l = keyValues->succ;[45;25H[K[71;103H6[45;6H[?25h[?25l = keyValues->succ;[45;24H[K[71;103H5[45;5H[?25h[?25lp = keyValues->succ;[71;103H6[45;6H[?25h[?25l[71;4H[1m(insert)- VISUAL --[m[71;100H[K[71;100H44,37[9CTop[71;90H^O[44;37H[71;90H2 [44;37H[43;37H[7ms; p != [m[1m[7m[35mNULL[m[7m;) { 
    [m[1m[7m[32mstruct[m[7m KeyValues *tmp = keyValue[?25h[?25l[m[71;90H [44;37H[71;4H[1mINSERTt --[m[71;13H[K[71;100H44,37[9CTop[43;37Hs; p != [1m[35mNULL[m;) {[43;53H[K[44;1H    [1m[32mstruct[m KeyValues *tmp = keyValue[?25h[?25l[71;104H8[44;38H[?25h[?25l;[44;38H[K[71;104H7[44;37H[?25h[?25l;[44;37H[K[71;104H6[44;36H[?25h[?25l;[44;36H[K[71;104H5[44;35H[?25h[?25l;[44;35H[K[71;104H4[44;34H[?25h[?25l;[44;32H[K[71;104H1[44;31H[?25h[?25l;[44;31H[K[71;104H0[44;30H[?25h[?25l;[44;30H[K[71;103H29[44;29H[?25h[?25lp;[71;103H30[44;30H[?25h[?25l[47;9H[46m([8C)[m[71;101H7,18[47;18H[?25h[?25l)[46m;[m[47;19H[K[47;17H[46m)[m;[71;104H7[47;17H[?25h[?25l)[46m;[m[47;18H[K[47;16H[46m)[m;[71;104H6[47;16H[?25h[?25l);[47;16H[K[47;14H[46m)[m[71;104H4[47;14H[?25h[?25l)[46m;[m[47;15H[K[47;13H[46m)[m;[71;104H3[47;13H[?25h[?25l[46mk[m);k[46m)[m[71;104H4[47;14H[?25h[?25l[46me[m);e[46m)[m[71;104H5[47;15H[?25h[?25l[46my[m);y[46m)[m[71;104H6[47;16H[?25h[?25l[47;9H(p->key)[71;104H5[47;15H[?25h[?25l[71;104H4[47;14H[?25h[?25l[71;104H3[47;13H[?25h[?25l[71;104H2[47;12H[?25h[?25l[71;104H1[47;11H[?25h[?25l[46m([mp->key[46m)[m[71;104H0[47;10H[?25h[?25l(p->ke[46my[m);[47;9H([46m([mp->key[46m)[m[71;104H1[47;11H[?25h[?25lcp->ke[46my[m);[47;10H(cp->key[71;104H2[47;12H[?25h[?25lhp->key);[71;104H3[47;13H[?25h[?25lap->key);[71;104H4[47;14H[?25h[?25lrp->key);[71;104H5[47;15H[?25h[?25l[1m[32mchar[m p->key);[71;104H6[47;16H[?25h[?25l*p->key);[71;104H7[47;17H[?25h[?25l)p->key);[47;10H[46m([6C)[m[71;104H8[47;18H[?25h[?25l[46;9H[46m([mp[46m)[m[47;10H([6C)[71;101H6,11[46;11H[?25h[?25l[46mi[m); [1m[36m//free KeyValue struct[m[46;11Hi[46m)[m[71;104H2[46;12H[?25h[?25l)[46m;[m [1m[36m//free KeyValue struct[m[46;36H[K[46;11H[46m)[m;[71;104H1[46;11H[?25h[?25l[46mt[m); [1m[36m//free KeyValue struct[m[46;11Ht[46m)[m[71;104H2[46;12H[?25h[?25l)[46m;[m [1m[36m//free KeyValue struct[m[46;36H[K[46;11H[46m)[m;[71;104H1[46;11H[?25h[?25l)[46m;[m [1m[36m//free KeyValue struct[m[46;35H[K[46;10H[46m)[m;[71;104H0[46;10H[?25h[?25l[46mt[m); [1m[36m//free KeyValue struct[m[46;10Ht[46m)[m[71;104H1[46;11H[?25h[?25l[46mm[m); [1m[36m//free KeyValue struct[m[46;11Hm[46m)[m[71;104H2[46;12H[?25h[?25l[46mp[m); [1m[36m//free KeyValue struct[m[46;12Hp[46m)[m[71;104H3[46;13H[?25h[?25l(tmp)[71;101H7,19[47;19H[?25h[?25l->key);[47;25H[K[47;10H[46m([6C)[m[71;104H8[47;18H[?25h[?25lt->key);[47;10H([6C)[71;104H9[47;19H[?25h[?25lm->key);[71;103H20[47;20H[?25h[?25lp->key);[71;104H1[47;21H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H[1m[36m */[m
[1m[32mint[m main() {
  [1m[32mstruct[m KeyValue *keyValues = make_key_values();[71;100H[K[71;100H47,21[9C33%[44;21H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;3H[1m[33mfor[m ([1m[32mstruct[m KeyValue *p = keyValues; p != [1m[35mNULL[m; p = p->succ) {
    printf([1m[35m"[m[1m[31m%s[m[1m[35m: [m[1m[31m%d\n[m[1m[35m"[m, p->key, p->value);
  }[71;100H[K[71;100H47,21[9C66%[41;21H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;3Hfree_key_values(keyValues);
  [1m[33mreturn[m [1m[35m0[m;
}[71;100H[K[71;100H47,21[9CBot[38;21H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H[1m[34m~                                                                                                                    [69;1H~                                                                                                                    [70;1H~                                                                                                                    [m[71;100H[K[71;100H47,21[9CBot[35;21H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H[1m[34m~                                                                                                                    [69;1H~                                                                                                                    [70;1H~                                                                                                                    [m[71;100H[K[71;100H47,21[9CBot[32;21H[?25h[71;1H[K[32;20H[?25l[71;90H^[[32;20H[71;90H  [32;21H[71;100H47,20[9CBot[32;20H[?25h[?25l[71;90Hw[32;20H[71;90H [32;21H[71;104H1[32;21H[?25h[?25l[71;90Hq[32;21H[?25h[?25l[71;91H^M[32;21H[71;90H   [32;21H[?25h[?25l[71;90H:[32;21H[71;90H[K[71;1H:[?2004h[?25hw[?25l[?25hq[?25l[?25h[?25l[?1006l[?1002l[?2004l"bug-program.c" 79L, 2273C written[23;2t[23;1t[22;2t[22;1t[23;2t[23;1t
[?2004l[?1l>[?25h[?1049l[23;0;0trgeary1@remote00:~/i220a/submit/lab10/exercises/bug-program$ make
cc -g -Wall -std=c11 -O1    bug-program.c   -o bug-program
[01m[Kbug-program.c:[m[K In function â€˜[01m[Kfree_key_values[m[Kâ€™:
[01m[Kbug-program.c:44:29:[m[K [01;35m[Kwarning: [m[Kinitialization of â€˜[01m[Kstruct KeyValues *[m[Kâ€™ from incompatible pointer type â€˜[01m[Kstruct KeyValue *[m[Kâ€™ [[01;35m[K-Wincompatible-pointer-types[m[K]
     struct KeyValues *tmp = [01;35m[Kp[m[K;
                             [01;35m[K^[m[K
[01m[Kbug-program.c:47:21:[m[K [01;31m[Kerror: [m[Kdereferencing pointer to incomplete type â€˜[01m[Kstruct KeyValues[m[Kâ€™
     free((char *)tmp[01;31m[K->[m[Kkey);
                     [01;31m[K^~[m[K
make: *** [<builtin>: bug-program] Error 1
rgeary1@remote00:~/i220a/submit/lab10/exercises/bug-program$ makevim bug-program.c
[?1000h[?2004h[?1049h[22;0;0t[?1h=[?2004h[1;71r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[71;1H"bug-program.c" 79L, 2273C[2;1Hâ–½[6n[2;1H  [1;1H[>c]10;?]11;?[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([33msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k));

  [33mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [33mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [33mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m;) {
    [32mstruct[m KeyValues *tmp = p;
    p = keyValues->succ;
    free(tmp); [34m//free KeyValue struct[m
    free(([32mchar[m *)tmp->key);
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
    [31m"twas"[m, [31m"brillig"[m, [31m"and"[m, [31m"the"[m, [31m"slithy"[m, [31m"toves"[m,
    [31m"did"[m, [31m"gyre"[m, [31m"and"[m, [31m"gimble"[m, [31m"in"[m, [31m"the"[m, [31m"wabe"[m,
    [31m"all"[m, [31m"mimsy"[m, [31m"were"[m, [31m"the"[m, [31m"borogoves"[m,
    [31m"and"[m, [31m"the"[m, [31m"mome"[m, [31m"raths"[m, [31m"outgrabe"[m,
  };
  [32mstruct[m KeyValue *p = [31mNULL[m;
  [33mfor[m ([32mint[m i = [31m0[m; i < [33msizeof[m(keys)/[33msizeof[m(keys[[31m0[m]); i++) {
    p = add_key_value(p, keys[i], i);
  }
  [33mreturn[m p;
}

[34m/** Print out all the words in the first verse of Carroll's Jabberwocky
 *  paired with their index in the verse.[m[71;100H47,21[9CTop[47;21H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[27m[23m[29m[m[H[2J[?25l[1;1H[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m
[1m[34m#include [m[1m[35m<string.h>[m

[1m[36m/** A struct used to form a linear chain of key-value pairs. */[m
[1m[32mstruct[m KeyValue {
  [1m[32mconst[m [1m[32mchar[m *key;[7C[1m[36m/** string key */[m
  [1m[32mint[m value;[13C[1m[36m/** integer value */[m
  [1m[32mstruct[m KeyValue *succ; [1m[36m/** next key-value in chain */[m
};

[1m[36m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *
add_key_value([1m[32mstruct[m KeyValue *keyValues, [1m[32mconst[m [1m[32mchar[m *k, [1m[32mint[m v)
{
  [1m[36m//allocate storage for new KeyValue struct[m
  [1m[32mstruct[m KeyValue *kv = malloc([1m[33msizeof[m([1m[32mstruct[m KeyValue *));

  [1m[36m//allocate storage for string pointed to by k[m
  [1m[32mchar[m *s = malloc(strlen(k));

  [1m[33mif[m (kv == [1m[35mNULL[m || s == [1m[35mNULL[m) { [1m[36m//check if allocations succeeded[m
    fprintf([1m[35mstderr[m, [1m[35m"malloc failure: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));
    exit([1m[35m1[m);
  }
  strcpy(s, k);  [1m[36m//copy string k into newly allocated memory pointed to by s

[m  [1m[36m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [1m[33mreturn[m kv;
}

[1m[36m/** Free all the key-value's in keyValues. */[m
[1m[32mstatic[m [1m[32mvoid[m
free_key_values([1m[32mstruct[m KeyValue *keyValues)
{
  [1m[36m//go thru chain of keyValues[m
  [1m[33mfor[m ([1m[32mstruct[m KeyValue *p = keyValues; p != [1m[35mNULL[m;) {
    [1m[32mstruct[m KeyValues *tmp = p;
    p = keyValues->succ;
    free(tmp); [1m[36m//free KeyValue struct[m
    free(([1m[32mchar[m *)tmp->key);
  }
}

[1m[36m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *
make_key_values([1m[32mvoid[m) {
  [1m[32mconst[m [1m[32mchar[m *keys[] = {
    [1m[35m"twas"[m, [1m[35m"brillig"[m, [1m[35m"and"[m, [1m[35m"the"[m, [1m[35m"slithy"[m, [1m[35m"toves"[m,
    [1m[35m"did"[m, [1m[35m"gyre"[m, [1m[35m"and"[m, [1m[35m"gimble"[m, [1m[35m"in"[m, [1m[35m"the"[m, [1m[35m"wabe"[m,
    [1m[35m"all"[m, [1m[35m"mimsy"[m, [1m[35m"were"[m, [1m[35m"the"[m, [1m[35m"borogoves"[m,
    [1m[35m"and"[m, [1m[35m"the"[m, [1m[35m"mome"[m, [1m[35m"raths"[m, [1m[35m"outgrabe"[m,
  };
  [1m[32mstruct[m KeyValue *p = [1m[35mNULL[m;
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < [1m[33msizeof[m(keys)/[1m[33msizeof[m(keys[[1m[35m0[m]); i++) {
    p = add_key_value(p, keys[i], i);
  }
  [1m[33mreturn[m p;
}

[1m[36m/** Print out all the words in the first verse of Carroll's Jabberwocky
 *  paired with their index in the verse.[m[71;100H47,21[9CTop"bug-program.c" 79L, 2273C[47;21H[?25h[?25l[71;101H4[44;21H[?25h[?25l[71;90Hi[44;21H[71;90H [44;21H[71;1H[1m-- INSERT --[m[71;13H[K[71;100H44,21[9CTop[44;21H[?25h[?25l *tmp = p;[44;30H[K[71;104H0[44;20H[?25h[71;1H[K[44;19H[?25l[71;90H^[[44;19H[71;90H  [44;20H[71;100H44,19[9CTop[44;19H[?25h[?25l[71;90H:[44;19H[71;90H[K[71;1H:[?2004h[?25hw[?25l[?25hq[?25l[?25h[?25l[?1006l[?1002l[?2004l"bug-program.c" 79L, 2272C written[23;2t[23;1t[22;2t[22;1t[23;2t[23;1t
[?2004l[?1l>[?25h[?1049l[23;0;0trgeary1@remote00:~/i220a/submit/lab10/exercises/bug-program$ make
cc -g -Wall -std=c11 -O1    bug-program.c   -o bug-program
rgeary1@remote00:~/i220a/submit/lab10/exercises/bug-program$ ./[K[Kmakevim bug-program.cmake[Kvim bug-program.c[2Pcd bug-program/[3PexercisesSORRY< FORGOT TO START MY SCRIPTgit push[Kmerge lab9 -m 'merged lab9'[12Pcheckout mastermerge lab9 -m 'merged lab9'push[KSORRY< FORGOT TO START MY SCRIPT[20Pcd exercisesbug-program/vim bug-program.cmake[Kvim bug-program.cmake[K[Kvalgrind -v --leak-check=yes ./bug-program 2>bug-program .c [K[Kvalgrind
outgrabe: 22
raths: 21
mome: 20
the: 19
and: 18
borogoves: 17
the: 16
were: 15
mimsy: 14
all: 13
wabe: 12
the: 11
in: 10
gimble: 9
and: 8
gyre: 7
did: 6
toves: 5
slithy: 4
the: 3
and: 2
brillig: 1
twas: 0

^C
rgeary1@remote00:~/i220a/submit/lab10/exercises/bug-program$ valgrind -v --leak-check=yes ./bug-program 2>bug-program.valgrind[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cmake[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cvim bug-program.c[Kvalgrind 
[?1000h[?2004h[?1049h[22;0;0t[?1h=[?2004h[1;71r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[71;1H"bug-program.valgrind" 364L, 21427C[2;1Hâ–½[6n[2;1H  [1;1H[>c]10;?]11;?[1;1H==3063836== Memcheck, a memory error detector
==3063836== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==3063836== Using Valgrind-3.14.0-353a3587bb-20181007X and LibVEX; rerun with -h for copyright info
==3063836== Command: ./bug-program
==3063836==
--3063836-- Valgrind options:
--3063836--    -v
--3063836--    --leak-check=yes
--3063836-- Contents of /proc/version:
--3063836--   Linux version 5.7.0-0.bpo.2-amd64 (debian-kernel@lists.debian.org) (gcc version 8.3.0 (Debian 8.3.0-6),,[11;1H GNU ld (GNU Binutils for Debian) 2.31.1) #1 SMP Debian 5.7.10-1~bpo10+1 (2020-07-30)
--3063836--
--3063836-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-avx-avx2-bmi
--3063836-- Page sizes: currently 4096, max supported 4096
--3063836-- Valgrind library directory: /usr/lib/x86_64-linux-gnu/valgrind
--3063836-- Reading syms from /import/linux/home1/rgeary1/projects/i220a/submit/lab10/exercises/bug-program/bug-progrr[17;1Ham
--3063836-- Reading syms from /lib/x86_64-linux-gnu/ld-2.28.so
--3063836--   Considering /usr/lib/debug/.build-id/f2/5dfd7b95be4ba386fd71080accae8c0732b711.debug ..
--3063836--   .. build-id is valid
--3063836-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux
--3063836--   Considering /usr/lib/debug/.build-id/32/2e77af97f403c3d34ff09edf60b089e72ec889.debug ..
--3063836--   .. build-id is valid
--3063836--    object doesn't have a dynamic symbol table
--3063836-- Scheduler: using generic scheduler lock implementation.
--3063836-- Reading suppressions file: /usr/lib/x86_64-linux-gnu/valgrind/default.supp
==3063836== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-3063836-by-rgeary1-on-???
==3063836== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-3063836-by-rgeary1-on-???
==3063836== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-3063836-by-rgeary1-on-???
==3063836==
==3063836== TO CONTROL THIS PROCESS USING vgdb (which you probably
==3063836== don't want to do, unless you know exactly what you're doing,
==3063836== or are doing some strange experiment):
==3063836==   /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=3063836 ...command...
==3063836==
==3063836== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==3063836==   /path/to/gdb ./bug-program
==3063836== and then give GDB the following command
==3063836==   target remote | /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=3063836
==3063836== --pid is optional if only one valgrind process is running
==3063836==
--3063836-- REDIR: 0x401e2f0 (ld-linux-x86-64.so.2:strlen) redirected to 0x580c9ce2 (vgPlain_amd64_linux_REDIR_FOR_stt[43;1Hrlen)
--3063836-- REDIR: 0x401e0d0 (ld-linux-x86-64.so.2:index) redirected to 0x580c9cfc (vgPlain_amd64_linux_REDIR_FOR_indd[45;1Hex)
--3063836-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so
--3063836--   Considering /usr/lib/debug/.build-id/34/fbc4cdfbfce1bfc3d2e522a01a050bf724c930.debug ..
--3063836--   .. build-id is valid
--3063836-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
--3063836--   Considering /usr/lib/debug/.build-id/ca/bb7898ea982d936cbfadd70ae831c6eb63623f.debug ..
--3063836--   .. build-id is valid
==3063836== WARNING: new redirection conflicts with existing -- ignoring it
--3063836--     old: 0x0401e2f0 (strlen[14C) R-> (0000.0) 0x580c9ce2 vgPlain_amd64_linux_REDIR_FOR_strlen
--3063836--     new: 0x0401e2f0 (strlen[14C) R-> (2007.0) 0x04838d80 strlen
--3063836-- REDIR: 0x401ab10 (ld-linux-x86-64.so.2:strcmp) redirected to 0x4839e40 (strcmp)
--3063836-- REDIR: 0x401e830 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x483d860 (mempcpy)
--3063836-- Reading syms from /lib/x86_64-linux-gnu/libc-2.28.so
--3063836--   Considering /usr/lib/debug/.build-id/18/b9a9a8c523e5cfe5b5d946d605d09242f09798.debug ..
--3063836--   .. build-id is valid
--3063836-- REDIR: 0x4906f70 (libc.so.6:memmove) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x4906160 (libc.so.6:strncpy) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x4907250 (libc.so.6:strcasecmp) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x4905b70 (libc.so.6:strcat) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x4906190 (libc.so.6:rindex) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x4908890 (libc.so.6:rawmemchr) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x4921230 (libc.so.6:wmemchr) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x4920cd0 (libc.so.6:wcscmp) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x49070e0 (libc.so.6:mempcpy) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x4906f10 (libc.so.6:bcmp) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x4906100 (libc.so.6:strncmp) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)[71;100H1,1[11CTop[1;1H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[27m[23m[29m[m[H[2J[?25l[1;1H==3063836== Memcheck, a memory error detector
==3063836== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==3063836== Using Valgrind-3.14.0-353a3587bb-20181007X and LibVEX; rerun with -h for copyright info
==3063836== Command: ./bug-program
==3063836==
--3063836-- Valgrind options:
--3063836--    -v
--3063836--    --leak-check=yes
--3063836-- Contents of /proc/version:
--3063836--   Linux version 5.7.0-0.bpo.2-amd64 (debian-kernel@lists.debian.org) (gcc version 8.3.0 (Debian 8.3.0-6),,[11;1H GNU ld (GNU Binutils for Debian) 2.31.1) #1 SMP Debian 5.7.10-1~bpo10+1 (2020-07-30)
--3063836--
--3063836-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-avx-avx2-bmi
--3063836-- Page sizes: currently 4096, max supported 4096
--3063836-- Valgrind library directory: /usr/lib/x86_64-linux-gnu/valgrind
--3063836-- Reading syms from /import/linux/home1/rgeary1/projects/i220a/submit/lab10/exercises/bug-program/bug-progrr[17;1Ham
--3063836-- Reading syms from /lib/x86_64-linux-gnu/ld-2.28.so
--3063836--   Considering /usr/lib/debug/.build-id/f2/5dfd7b95be4ba386fd71080accae8c0732b711.debug ..
--3063836--   .. build-id is valid
--3063836-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux
--3063836--   Considering /usr/lib/debug/.build-id/32/2e77af97f403c3d34ff09edf60b089e72ec889.debug ..
--3063836--   .. build-id is valid
--3063836--    object doesn't have a dynamic symbol table
--3063836-- Scheduler: using generic scheduler lock implementation.
--3063836-- Reading suppressions file: /usr/lib/x86_64-linux-gnu/valgrind/default.supp
==3063836== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-3063836-by-rgeary1-on-???
==3063836== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-3063836-by-rgeary1-on-???
==3063836== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-3063836-by-rgeary1-on-???
==3063836==
==3063836== TO CONTROL THIS PROCESS USING vgdb (which you probably
==3063836== don't want to do, unless you know exactly what you're doing,
==3063836== or are doing some strange experiment):
==3063836==   /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=3063836 ...command...
==3063836==
==3063836== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==3063836==   /path/to/gdb ./bug-program
==3063836== and then give GDB the following command
==3063836==   target remote | /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=3063836
==3063836== --pid is optional if only one valgrind process is running
==3063836==
--3063836-- REDIR: 0x401e2f0 (ld-linux-x86-64.so.2:strlen) redirected to 0x580c9ce2 (vgPlain_amd64_linux_REDIR_FOR_stt[43;1Hrlen)
--3063836-- REDIR: 0x401e0d0 (ld-linux-x86-64.so.2:index) redirected to 0x580c9cfc (vgPlain_amd64_linux_REDIR_FOR_indd[45;1Hex)
--3063836-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so
--3063836--   Considering /usr/lib/debug/.build-id/34/fbc4cdfbfce1bfc3d2e522a01a050bf724c930.debug ..
--3063836--   .. build-id is valid
--3063836-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
--3063836--   Considering /usr/lib/debug/.build-id/ca/bb7898ea982d936cbfadd70ae831c6eb63623f.debug ..
--3063836--   .. build-id is valid
==3063836== WARNING: new redirection conflicts with existing -- ignoring it
--3063836--     old: 0x0401e2f0 (strlen[14C) R-> (0000.0) 0x580c9ce2 vgPlain_amd64_linux_REDIR_FOR_strlen
--3063836--     new: 0x0401e2f0 (strlen[14C) R-> (2007.0) 0x04838d80 strlen
--3063836-- REDIR: 0x401ab10 (ld-linux-x86-64.so.2:strcmp) redirected to 0x4839e40 (strcmp)
--3063836-- REDIR: 0x401e830 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x483d860 (mempcpy)
--3063836-- Reading syms from /lib/x86_64-linux-gnu/libc-2.28.so
--3063836--   Considering /usr/lib/debug/.build-id/18/b9a9a8c523e5cfe5b5d946d605d09242f09798.debug ..
--3063836--   .. build-id is valid
--3063836-- REDIR: 0x4906f70 (libc.so.6:memmove) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x4906160 (libc.so.6:strncpy) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x4907250 (libc.so.6:strcasecmp) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x4905b70 (libc.so.6:strcat) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x4906190 (libc.so.6:rindex) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x4908890 (libc.so.6:rawmemchr) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x4921230 (libc.so.6:wmemchr) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x4920cd0 (libc.so.6:wcscmp) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x49070e0 (libc.so.6:mempcpy) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x4906f10 (libc.so.6:bcmp) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x4906100 (libc.so.6:strncmp) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)[71;100H1,1[11CTop"bug-program.valgrind" 364L, 21427C[1;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H--3063836-- REDIR: 0x4905be0 (libc.so.6:strcmp) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x4907040 (libc.so.6:memset) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x4920ca0 (libc.so.6:wcschr) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)[71;1H[K[71;100H9,1[12C1%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H--3063836-- REDIR: 0x49060a0 (libc.so.6:strnlen) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x4905c70 (libc.so.6:strcspn) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x49072a0 (libc.so.6:strncasecmp) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)[71;100H[K[71;100H11,1[11C2%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H--3063836-- REDIR: 0x4905c40 (libc.so.6:strcpy) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x49073e0 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x49224d0 (libc.so.6:wcsnlen) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)[71;100H[K[71;100H14,1[11C3%[6;1H[?25h[?25l[1;70r[1;1H[4M[1;71r[67;1H--3063836-- REDIR: 0x49061c0 (libc.so.6:strpbrk) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x4905ba0 (libc.so.6:index) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x4906070 (libc.so.6:strlen) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x490d280 (libc.so.6:memrchr) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)[71;100H[K[71;100H17,1[11C4%[6;1H[?25h[?25l[1;70r[1;1H[4M[1;71r[67;1H--3063836-- REDIR: 0x49072f0 (libc.so.6:strcasecmp_l) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x4906ee0 (libc.so.6:memchr) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x4920db0 (libc.so.6:wcslen) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x4906460 (libc.so.6:strspn) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)[71;100H[K[71;100H21,1[11C5%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H--3063836-- REDIR: 0x4907220 (libc.so.6:stpncpy) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x49071f0 (libc.so.6:stpcpy) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x49088c0 (libc.so.6:strchrnul) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)[71;100H[K[71;100H24,1[11C6%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H--3063836-- REDIR: 0x4907340 (libc.so.6:strncasecmp_l) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3063836-- REDIR: 0x49d9fa0 (libc.so.6:__strrchr_avx2) redirected to 0x4838790 (rindex)
--3063836-- REDIR: 0x4902350 (libc.so.6:malloc) redirected to 0x4835710 (malloc)[71;100H[K[71;100H27,1[11C7%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H--3063836-- REDIR: 0x491b100 (libc.so.6:__strcpy_sse2_unaligned) redirected to 0x4838db0 (strcpy)
==3063836== Invalid write of size 1
==3063836==    at 0x4838DD7: strcpy (vg_replace_strmem.c:512)[71;100H[K[71;100H30,1[11C8%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    by 0x109316: add_key_value (bug-program.c:30)
==3063836==    by 0x109316: make_key_values (bug-program.c:64)
==3063836==    by 0x109316: main (bug-program.c:73)[71;100H[K[71;100H33,1[11C9%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==  Address 0x4a42094 is 0 bytes after a block of size 4 alloc'd
==3063836==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==3063836==    by 0x1092F6: add_key_value (bug-program.c:24)[71;100H[K[71;100H36,1[10C10%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    by 0x1092F6: make_key_values (bug-program.c:64)
==3063836==    by 0x1092F6: main (bug-program.c:73)
==3063836==[71;100H[K[71;100H39,1[10C11%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836== Invalid write of size 4
==3063836==    at 0x10931A: add_key_value (bug-program.c:33)
==3063836==    by 0x10931A: make_key_values (bug-program.c:64)[71;100H[K[71;100H41,1[10C12%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    by 0x10931A: main (bug-program.c:73)
==3063836==  Address 0x4a42048 is 0 bytes after a block of size 8 alloc'd
==3063836==    at 0x483577F: malloc (vg_replace_malloc.c:299)[71;100H[K[71;100H43,1[10C13%[6;1H[?25h[?25l[1;70r[1;1H[5M[1;71r[66;1H==3063836==    by 0x1092D3: add_key_value (bug-program.c:21)
==3063836==    by 0x1092D3: make_key_values (bug-program.c:64)
==3063836==    by 0x1092D3: main (bug-program.c:73)
==3063836==
==3063836== Invalid write of size 8[71;100H[K[71;100H48,1[10C14%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    at 0x10931D: add_key_value (bug-program.c:33)
==3063836==    by 0x10931D: make_key_values (bug-program.c:64)
==3063836==    by 0x10931D: main (bug-program.c:73)[71;100H[K[71;100H51,1[10C15%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==  Address 0x4a42050 is 8 bytes after a block of size 8 alloc'd
==3063836==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==3063836==    by 0x1092D3: add_key_value (bug-program.c:21)[71;100H[K[71;100H54,1[10C16%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    by 0x1092D3: make_key_values (bug-program.c:64)
==3063836==    by 0x1092D3: main (bug-program.c:73)
==3063836==[71;100H[K[71;100H57,1[10C17%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836== Invalid read of size 4
==3063836==    at 0x109338: main (bug-program.c:75)
==3063836==  Address 0x4a42e08 is 0 bytes after a block of size 8 alloc'd[71;100H[K[71;100H60,1[10C18%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==3063836==    by 0x1092D3: add_key_value (bug-program.c:21)
==3063836==    by 0x1092D3: make_key_values (bug-program.c:64)[71;100H[K[71;100H63,1[10C19%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    by 0x1092D3: main (bug-program.c:73)
==3063836==
--3063836-- REDIR: 0x49d9db0 (libc.so.6:__strchrnul_avx2) redirected to 0x483d390 (strchrnul)[71;100H[K[71;100H66,1[10C20%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H--3063836-- REDIR: 0x49da170 (libc.so.6:__strlen_avx2) redirected to 0x4838c60 (strlen)
==3063836== Invalid read of size 1
==3063836==    at 0x4838C74: strlen (vg_replace_strmem.c:460)[71;100H[K[71;100H69,1[10C21%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    by 0x48CF9EE: vfprintf (vfprintf.c:1638)
==3063836==    by 0x48D6605: printf (printf.c:33)
==3063836==    by 0x10934B: main (bug-program.c:75)[71;100H[K[71;100H72,1[10C22%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==  Address 0x4a42e58 is 0 bytes after a block of size 8 alloc'd
==3063836==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==3063836==    by 0x1092F6: add_key_value (bug-program.c:24)[71;100H[K[71;100H75,1[10C23%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    by 0x1092F6: make_key_values (bug-program.c:64)
==3063836==    by 0x1092F6: main (bug-program.c:73)
==3063836==[71;100H[K[71;100H78,1[10C24%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H--3063836-- REDIR: 0x49da690 (libc.so.6:__mempcpy_avx_unaligned_erms) redirected to 0x483d4a0 (mempcpy)
==3063836== Invalid read of size 8
==3063836==    at 0x10934C: main (bug-program.c:74)[71;100H[K[71;100H81,1[10C25%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==  Address 0x4a42e10 is 8 bytes after a block of size 8 alloc'd
==3063836==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==3063836==    by 0x1092D3: add_key_value (bug-program.c:21)[71;100H[K[71;100H84,1[10C26%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    by 0x1092D3: make_key_values (bug-program.c:64)
==3063836==    by 0x1092D3: main (bug-program.c:73)
==3063836==[71;100H[K[71;100H87,1[10C27%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836== Invalid read of size 8
==3063836==    at 0x109358: free_key_values (bug-program.c:45)
==3063836==    by 0x109358: main (bug-program.c:77)[71;100H[K[71;100H90,1[10C28%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==  Address 0x4a42e10 is 8 bytes after a block of size 8 alloc'd
==3063836==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==3063836==    by 0x1092D3: add_key_value (bug-program.c:21)[71;100H[K[71;100H93,1[10C29%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    by 0x1092D3: make_key_values (bug-program.c:64)
==3063836==    by 0x1092D3: main (bug-program.c:73)
==3063836==[71;100H[K[71;100H96,1[10C30%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H--3063836-- REDIR: 0x49029a0 (libc.so.6:free) redirected to 0x4836940 (free)
==3063836== Invalid read of size 8
==3063836==    at 0x109364: free_key_values (bug-program.c:47)[71;100H[K[71;100H99,1[10C31%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    by 0x109364: main (bug-program.c:77)
==3063836==  Address 0x4a42e00 is 0 bytes inside a block of size 8 free'd
==3063836==    at 0x48369AB: free (vg_replace_malloc.c:530)[71;100H[K[71;100H102,1[9C32%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    by 0x109363: free_key_values (bug-program.c:46)
==3063836==    by 0x109363: main (bug-program.c:77)
==3063836==  Block was alloc'd at[71;100H[K[71;100H105,1[9C33%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==3063836==    by 0x1092D3: add_key_value (bug-program.c:21)
==3063836==    by 0x1092D3: make_key_values (bug-program.c:64)[71;100H[K[71;100H108,1[9C34%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    by 0x1092D3: main (bug-program.c:73)
==3063836==
==3063836== Invalid free() / delete / delete[] / realloc()[71;100H[K[71;100H111,1[9C35%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    at 0x48369AB: free (vg_replace_malloc.c:530)
==3063836==    by 0x109363: free_key_values (bug-program.c:46)
==3063836==    by 0x109363: main (bug-program.c:77)[71;100H[K[71;100H114,1[9C36%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==  Address 0x4a42d60 is 0 bytes inside a block of size 8 free'd
==3063836==    at 0x48369AB: free (vg_replace_malloc.c:530)
==3063836==    by 0x109363: free_key_values (bug-program.c:46)[71;100H[K[71;100H117,1[9C37%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    by 0x109363: main (bug-program.c:77)
==3063836==  Block was alloc'd at
==3063836==    at 0x483577F: malloc (vg_replace_malloc.c:299)[71;100H[K[71;100H120,1[9C38%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    by 0x1092D3: add_key_value (bug-program.c:21)
==3063836==    by 0x1092D3: make_key_values (bug-program.c:64)
==3063836==    by 0x1092D3: main (bug-program.c:73)[71;100H[K[71;100H123,1[9C39%[6;1H[?25h[?25l[71;90H^[[6;1H[71;92H[[6;1H[71;93H<[6;1H[71;94H6[6;1H[71;95H5[6;1H[71;96H;[6;1H[71;97H3[6;1H[71;90H        [6;1H[1;70r[1;1H[3M[1;71r[68;1H==3063836==
==3063836== Invalid free() / delete / delete[] / realloc()
==3063836==    at 0x48369AB: free (vg_replace_malloc.c:530)[71;100H[K[71;100H126,1[9C40%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    by 0x10936C: free_key_values (bug-program.c:47)
==3063836==    by 0x10936C: main (bug-program.c:77)
==3063836==  Address 0x4a42db0 is 0 bytes inside a block of size 5 free'd[71;100H[K[71;100H129,1[9C41%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    at 0x48369AB: free (vg_replace_malloc.c:530)
==3063836==    by 0x10936C: free_key_values (bug-program.c:47)
==3063836==    by 0x10936C: main (bug-program.c:77)[71;100H[K[71;100H132,1[9C42%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==  Block was alloc'd at
==3063836==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==3063836==    by 0x1092F6: add_key_value (bug-program.c:24)[71;100H[K[71;100H135,1[9C43%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    by 0x1092F6: make_key_values (bug-program.c:64)
==3063836==    by 0x1092F6: main (bug-program.c:73)
==3063836==[71;100H[K[71;100H138,1[9C44%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==
==3063836== More than 10000000 total errors detected.  I'm not reporting any more.
==3063836== Final error counts will be inaccurate.  Go fix your program![71;100H[K[71;100H141,1[9C45%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836== Rerun with --error-limit=no to disable this cutoff.  Note
==3063836== that errors may occur in your program without prior warning from
==3063836== Valgrind, because errors are no longer being displayed.[71;100H[K[71;100H144,1[9C46%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==
==3063836==
==3063836== Process terminating with default action of signal 2 (SIGINT)[71;100H[K[71;100H147,1[9C47%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    at 0x109358: free_key_values (bug-program.c:45)
==3063836==    by 0x109358: main (bug-program.c:77)
==3063836==[71;100H[K[71;100H150,1[9C48%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836== HEAP SUMMARY:
==3063836==     in use at exit: 255 bytes in 42 blocks
==3063836==   total heap usage: 47 allocs, 11,424,953 frees, 1,308 bytes allocated[71;100H[K[71;100H153,1[9C50%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==
==3063836== Searching for pointers to 42 not-freed blocks
==3063836== Checked 68,048 bytes[71;100H[K[71;100H156,1[9C51%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==
==3063836== 255 (168 direct, 87 indirect) bytes in 21 blocks are definitely lost in loss record 2 of 2
==3063836==    at 0x483577F: malloc (vg_replace_malloc.c:299)[71;100H[K[71;100H159,1[9C52%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    by 0x1092D3: add_key_value (bug-program.c:21)
==3063836==    by 0x1092D3: make_key_values (bug-program.c:64)
==3063836==    by 0x1092D3: main (bug-program.c:73)[71;100H[K[71;100H162,1[9C53%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==
==3063836== LEAK SUMMARY:
==3063836==    definitely lost: 168 bytes in 21 blocks[71;100H[K[71;100H165,1[9C54%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    indirectly lost: 87 bytes in 21 blocks
==3063836==      possibly lost: 0 bytes in 0 blocks
==3063836==    still reachable: 0 bytes in 0 blocks[71;100H[K[71;100H168,1[9C55%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==[9Csuppressed: 0 bytes in 0 blocks
==3063836==
==3063836== ERROR SUMMARY: 10000001 errors from 11 contexts (suppressed: 0 from 0)[71;100H[K[71;100H171,1[9C56%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==
==3063836== 23 errors in context 1 of 11:
==3063836== Invalid read of size 8[71;100H[K[71;100H174,1[9C57%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    at 0x10934C: main (bug-program.c:74)
==3063836==  Address 0x4a42e10 is 8 bytes after a block of size 8 alloc'd
==3063836==    at 0x483577F: malloc (vg_replace_malloc.c:299)[71;100H[K[71;100H177,1[9C58%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    by 0x1092D3: add_key_value (bug-program.c:21)
==3063836==    by 0x1092D3: make_key_values (bug-program.c:64)
==3063836==    by 0x1092D3: main (bug-program.c:73)[71;100H[K[71;100H180,1[9C59%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==
==3063836==
==3063836== 23 errors in context 2 of 11:[71;100H[K[71;100H183,1[9C60%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836== Invalid read of size 1
==3063836==    at 0x4838C74: strlen (vg_replace_strmem.c:460)
==3063836==    by 0x48CF9EE: vfprintf (vfprintf.c:1638)[71;100H[K[71;100H186,1[9C61%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    by 0x48D6605: printf (printf.c:33)
==3063836==    by 0x10934B: main (bug-program.c:75)
==3063836==  Address 0x4a42e58 is 0 bytes after a block of size 8 alloc'd[71;100H[K[71;100H189,1[9C62%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==3063836==    by 0x1092F6: add_key_value (bug-program.c:24)
==3063836==    by 0x1092F6: make_key_values (bug-program.c:64)[71;100H[K[71;100H192,1[9C63%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    by 0x1092F6: main (bug-program.c:73)
==3063836==
==3063836==[71;100H[K[71;100H195,1[9C64%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836== 23 errors in context 3 of 11:
==3063836== Invalid read of size 4
==3063836==    at 0x109338: main (bug-program.c:75)[71;100H[K[71;100H198,1[9C65%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==  Address 0x4a42e08 is 0 bytes after a block of size 8 alloc'd
==3063836==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==3063836==    by 0x1092D3: add_key_value (bug-program.c:21)[71;100H[K[71;100H201,1[9C66%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    by 0x1092D3: make_key_values (bug-program.c:64)
==3063836==    by 0x1092D3: main (bug-program.c:73)
==3063836==[71;100H[K[71;100H204,1[9C67%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==
==3063836== 23 errors in context 4 of 11:
==3063836== Invalid write of size 8[71;100H[K[71;100H207,1[9C68%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    at 0x10931D: add_key_value (bug-program.c:33)
==3063836==    by 0x10931D: make_key_values (bug-program.c:64)
==3063836==    by 0x10931D: main (bug-program.c:73)[71;100H[K[71;100H210,1[9C69%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==  Address 0x4a42050 is 8 bytes after a block of size 8 alloc'd
==3063836==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==3063836==    by 0x1092D3: add_key_value (bug-program.c:21)[71;100H[K[71;100H213,1[9C70%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    by 0x1092D3: make_key_values (bug-program.c:64)
==3063836==    by 0x1092D3: main (bug-program.c:73)
==3063836==[71;100H[K[71;100H216,1[9C71%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==
==3063836== 23 errors in context 5 of 11:
==3063836== Invalid write of size 4[71;100H[K[71;100H219,1[9C72%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    at 0x10931A: add_key_value (bug-program.c:33)
==3063836==    by 0x10931A: make_key_values (bug-program.c:64)
==3063836==    by 0x10931A: main (bug-program.c:73)[71;100H[K[71;100H222,1[9C73%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==  Address 0x4a42048 is 0 bytes after a block of size 8 alloc'd
==3063836==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==3063836==    by 0x1092D3: add_key_value (bug-program.c:21)[71;100H[K[71;100H225,1[9C74%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    by 0x1092D3: make_key_values (bug-program.c:64)
==3063836==    by 0x1092D3: main (bug-program.c:73)
==3063836==[71;100H[K[71;100H228,1[9C75%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==
==3063836== 23 errors in context 6 of 11:
==3063836== Invalid write of size 1[71;100H[K[71;100H231,1[9C76%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    at 0x4838DD7: strcpy (vg_replace_strmem.c:512)
==3063836==    by 0x109316: add_key_value (bug-program.c:30)
==3063836==    by 0x109316: make_key_values (bug-program.c:64)[71;100H[K[71;100H234,1[9C77%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    by 0x109316: main (bug-program.c:73)
==3063836==  Address 0x4a42094 is 0 bytes after a block of size 4 alloc'd
==3063836==    at 0x483577F: malloc (vg_replace_malloc.c:299)[71;100H[K[71;100H237,1[9C78%[6;1H[?25h[?25l[71;90H^[[6;1H[71;92H[[6;1H[71;93H<[6;1H[71;94H6[6;1H[71;95H5[6;1H[71;96H;[6;1H[71;97H5[6;1H[71;98H0[6;1H[71;99H;[6;1H[71;90H[[<65;50;2[6;1H[71;90H          [6;1H[1;70r[1;1H[3M[1;71r[68;1H==3063836==    by 0x1092F6: add_key_value (bug-program.c:24)
==3063836==    by 0x1092F6: make_key_values (bug-program.c:64)
==3063836==    by 0x1092F6: main (bug-program.c:73)[71;100H[K[71;100H240,1[9C79%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==
==3063836==
==3063836== 2499964 errors in context 7 of 11:[71;100H[K[71;100H243,1[9C80%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836== Invalid free() / delete / delete[] / realloc()
==3063836==    at 0x48369AB: free (vg_replace_malloc.c:530)
==3063836==    by 0x10936C: free_key_values (bug-program.c:47)[71;100H[K[71;100H246,1[9C81%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    by 0x10936C: main (bug-program.c:77)
==3063836==  Address 0x4a42db0 is 0 bytes inside a block of size 5 free'd
==3063836==    at 0x48369AB: free (vg_replace_malloc.c:530)[71;100H[K[71;100H249,1[9C82%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    by 0x10936C: free_key_values (bug-program.c:47)
==3063836==    by 0x10936C: main (bug-program.c:77)
==3063836==  Block was alloc'd at[71;100H[K[71;100H252,1[9C83%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==3063836==    by 0x1092F6: add_key_value (bug-program.c:24)
==3063836==    by 0x1092F6: make_key_values (bug-program.c:64)[71;100H[K[71;100H255,1[9C84%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    by 0x1092F6: main (bug-program.c:73)
==3063836==
==3063836==[71;100H[K[71;100H258,1[9C85%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836== 2499965 errors in context 8 of 11:
==3063836== Invalid free() / delete / delete[] / realloc()
==3063836==    at 0x48369AB: free (vg_replace_malloc.c:530)[71;100H[K[71;100H261,1[9C86%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    by 0x109363: free_key_values (bug-program.c:46)
==3063836==    by 0x109363: main (bug-program.c:77)
==3063836==  Address 0x4a42d60 is 0 bytes inside a block of size 8 free'd[71;100H[K[71;100H264,1[9C87%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    at 0x48369AB: free (vg_replace_malloc.c:530)
==3063836==    by 0x109363: free_key_values (bug-program.c:46)
==3063836==    by 0x109363: main (bug-program.c:77)[71;100H[K[71;100H267,1[9C88%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==  Block was alloc'd at
==3063836==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==3063836==    by 0x1092D3: add_key_value (bug-program.c:21)[71;100H[K[71;100H270,1[9C89%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    by 0x1092D3: make_key_values (bug-program.c:64)
==3063836==    by 0x1092D3: main (bug-program.c:73)
==3063836==[71;100H[K[71;100H273,1[9C90%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==
==3063836== 2499966 errors in context 9 of 11:
==3063836== Invalid read of size 8[71;100H[K[71;100H276,1[9C91%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    at 0x109364: free_key_values (bug-program.c:47)
==3063836==    by 0x109364: main (bug-program.c:77)
==3063836==  Address 0x4a42e00 is 0 bytes inside a block of size 8 free'd[71;100H[K[71;100H279,1[9C92%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    at 0x48369AB: free (vg_replace_malloc.c:530)
==3063836==    by 0x109363: free_key_values (bug-program.c:46)
==3063836==    by 0x109363: main (bug-program.c:77)[71;100H[K[71;100H282,1[9C93%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==  Block was alloc'd at
==3063836==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==3063836==    by 0x1092D3: add_key_value (bug-program.c:21)[71;100H[K[71;100H285,1[9C94%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    by 0x1092D3: make_key_values (bug-program.c:64)
==3063836==    by 0x1092D3: main (bug-program.c:73)
==3063836==[71;100H[K[71;100H288,1[9C95%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==
==3063836== 2499967 errors in context 10 of 11:
==3063836== Invalid read of size 8[71;100H[K[71;100H291,1[9C96%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    at 0x109358: free_key_values (bug-program.c:45)
==3063836==    by 0x109358: main (bug-program.c:77)
==3063836==  Address 0x4a42e10 is 8 bytes after a block of size 8 alloc'd[71;100H[K[71;100H294,1[9C97%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==3063836==    by 0x1092D3: add_key_value (bug-program.c:21)
==3063836==    by 0x1092D3: make_key_values (bug-program.c:64)[71;100H[K[71;100H297,1[9C98%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3063836==    by 0x1092D3: main (bug-program.c:73)
==3063836==
==3063836== ERROR SUMMARY: 10000001 errors from 11 contexts (suppressed: 0 from 0)[71;100H[K[71;100H300,1[9CBot[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H[1m[34m~                                                                                                                    [69;1H~                                                                                                                    [70;1H~                                                                                                                    [m[71;100H[K[71;100H303,1[9CBot[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H[1m[34m~                                                                                                                    [69;1H~                                                                                                                    [70;1H~                                                                                                                    [m[71;100H[K[71;100H306,1[9CBot[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H[1m[34m~                                                                                                                    [69;1H~                                                                                                                    [70;1H~                                                                                                                    [m[71;100H[K[71;100H309,1[9CBot[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H[1m[34m~                                                                                                                    [69;1H~                                                                                                                    [70;1H~                                                                                                                    [m[71;100H[K[71;100H312,1[9CBot[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H[1m[34m~                                                                                                                    [69;1H~                                                                                                                    [70;1H~                                                                                                                    [m[71;100H[K[71;100H315,1[9CBot[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H[1m[34m~                                                                                                                    [69;1H~                                                                                                                    [70;1H~                                                                                                                    [m[71;100H[K[71;100H318,1[9CBot[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H[1m[34m~                                                                                                                    [69;1H~                                                                                                                    [70;1H~                                                                                                                    [m[71;100H[K[71;100H321,1[9CBot[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H[1m[34m~                                                                                                                    [69;1H~                                                                                                                    [70;1H~                                                                                                                    [m[71;100H[K[71;100H324,1[9CBot[6;1H[?25h[?25l[71;90H^[[6;1H[71;90H  [6;1H[71;90H^[[6;1H[71;90H  [6;1H[?25h[?25l[71;90H:[6;1H[71;90H[K[71;1H:[?2004h[?25hw[?25l[?25hq[?25l[?25h[?25l[?1006l[?1002l[?2004l"bug-program.valgrind" 364L, 21427C written[23;2t[23;1t[22;2t[22;1t[23;2t[23;1t
[?2004l[?1l>[?25h[?1049l[23;0;0trgeary1@remote00:~/i220a/submit/lab10/exercises/bug-program$ vim bug-program.valgrind algrind -v --leak-check=yes ./bug-program 2>bug-program.valgrind[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cmake[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cvim bug-program.cmake[Kvim bug-program.c
[?1000h[?2004h[?1049h[22;0;0t[?1h=[?2004h[1;71r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[71;1H"bug-program.c" 79L, 2272C[2;1Hâ–½[6n[2;1H  [1;1H[>c]10;?]11;?[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([33msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k));

  [33mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [33mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [33mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m;) {
    [32mstruct[m KeyValue *tmp = p;
    p = keyValues->succ;
    free(tmp); [34m//free KeyValue struct[m
    free(([32mchar[m *)tmp->key);
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
    [31m"twas"[m, [31m"brillig"[m, [31m"and"[m, [31m"the"[m, [31m"slithy"[m, [31m"toves"[m,
    [31m"did"[m, [31m"gyre"[m, [31m"and"[m, [31m"gimble"[m, [31m"in"[m, [31m"the"[m, [31m"wabe"[m,
    [31m"all"[m, [31m"mimsy"[m, [31m"were"[m, [31m"the"[m, [31m"borogoves"[m,
    [31m"and"[m, [31m"the"[m, [31m"mome"[m, [31m"raths"[m, [31m"outgrabe"[m,
  };
  [32mstruct[m KeyValue *p = [31mNULL[m;
  [33mfor[m ([32mint[m i = [31m0[m; i < [33msizeof[m(keys)/[33msizeof[m(keys[[31m0[m]); i++) {
    p = add_key_value(p, keys[i], i);
  }
  [33mreturn[m p;
}

[34m/** Print out all the words in the first verse of Carroll's Jabberwocky
 *  paired with their index in the verse.[m[71;100H44,19[9CTop[44;19H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[27m[23m[29m[m[H[2J[?25l[1;1H[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m
[1m[34m#include [m[1m[35m<string.h>[m

[1m[36m/** A struct used to form a linear chain of key-value pairs. */[m
[1m[32mstruct[m KeyValue {
  [1m[32mconst[m [1m[32mchar[m *key;[7C[1m[36m/** string key */[m
  [1m[32mint[m value;[13C[1m[36m/** integer value */[m
  [1m[32mstruct[m KeyValue *succ; [1m[36m/** next key-value in chain */[m
};

[1m[36m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *
add_key_value([1m[32mstruct[m KeyValue *keyValues, [1m[32mconst[m [1m[32mchar[m *k, [1m[32mint[m v)
{
  [1m[36m//allocate storage for new KeyValue struct[m
  [1m[32mstruct[m KeyValue *kv = malloc([1m[33msizeof[m([1m[32mstruct[m KeyValue *));

  [1m[36m//allocate storage for string pointed to by k[m
  [1m[32mchar[m *s = malloc(strlen(k));

  [1m[33mif[m (kv == [1m[35mNULL[m || s == [1m[35mNULL[m) { [1m[36m//check if allocations succeeded[m
    fprintf([1m[35mstderr[m, [1m[35m"malloc failure: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));
    exit([1m[35m1[m);
  }
  strcpy(s, k);  [1m[36m//copy string k into newly allocated memory pointed to by s

[m  [1m[36m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [1m[33mreturn[m kv;
}

[1m[36m/** Free all the key-value's in keyValues. */[m
[1m[32mstatic[m [1m[32mvoid[m
free_key_values([1m[32mstruct[m KeyValue *keyValues)
{
  [1m[36m//go thru chain of keyValues[m
  [1m[33mfor[m ([1m[32mstruct[m KeyValue *p = keyValues; p != [1m[35mNULL[m;) {
    [1m[32mstruct[m KeyValue *tmp = p;
    p = keyValues->succ;
    free(tmp); [1m[36m//free KeyValue struct[m
    free(([1m[32mchar[m *)tmp->key);
  }
}

[1m[36m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *
make_key_values([1m[32mvoid[m) {
  [1m[32mconst[m [1m[32mchar[m *keys[] = {
    [1m[35m"twas"[m, [1m[35m"brillig"[m, [1m[35m"and"[m, [1m[35m"the"[m, [1m[35m"slithy"[m, [1m[35m"toves"[m,
    [1m[35m"did"[m, [1m[35m"gyre"[m, [1m[35m"and"[m, [1m[35m"gimble"[m, [1m[35m"in"[m, [1m[35m"the"[m, [1m[35m"wabe"[m,
    [1m[35m"all"[m, [1m[35m"mimsy"[m, [1m[35m"were"[m, [1m[35m"the"[m, [1m[35m"borogoves"[m,
    [1m[35m"and"[m, [1m[35m"the"[m, [1m[35m"mome"[m, [1m[35m"raths"[m, [1m[35m"outgrabe"[m,
  };
  [1m[32mstruct[m KeyValue *p = [1m[35mNULL[m;
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < [1m[33msizeof[m(keys)/[1m[33msizeof[m(keys[[1m[35m0[m]); i++) {
    p = add_key_value(p, keys[i], i);
  }
  [1m[33mreturn[m p;
}

[1m[36m/** Print out all the words in the first verse of Carroll's Jabberwocky
 *  paired with their index in the verse.[m[71;100H44,19[9CTop"bug-program.c" 79L, 2272C[44;19H[?25h[?25l[71;101H2,30[42;30H[?25h[?25l[71;90H2[42;31H[1m[7m[36ms[m[71;1H[1m-- VISUAL --[m[71;13H[K[71;90H2[42;31H[71;100H42,31[9CTop[42;31H[?25h[?25l[?25h[?25l[71;90H [42;30H[1m[36ms[m[71;1H[K[71;100H42,30[9CTop[42;30H[?25h[?25l[71;90H~@k[42;30H[71;90H   [42;30H[?25h[?25l[71;101H4,29[44;29H[?25h[?25l[71;90H~@k[44;29H[71;90H   [44;28H[71;104H8[44;28H[?25h[?25l[71;90HK[44;28H[71;1H:! man 'p'[71;90H[K[71;11H[?2004l[?1l>[?25h[?1049l[23;0;0t
[?1006l[?1002l[?2004lEYNo manual entry for p
[?1006h[?1002h[?2004h
shell returned 16

Press ENTER or type command to continue[?1006l[?1002l[?1006h[?1002h[?1049h[22;0;0t[?1h=[?2004h[?25l[44;28H[27m[23m[29m[m[H[2J[1;1H[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m
[1m[34m#include [m[1m[35m<string.h>[m

[1m[36m/** A struct used to form a linear chain of key-value pairs. */[m
[1m[32mstruct[m KeyValue {
  [1m[32mconst[m [1m[32mchar[m *key;[7C[1m[36m/** string key */[m
  [1m[32mint[m value;[13C[1m[36m/** integer value */[m
  [1m[32mstruct[m KeyValue *succ; [1m[36m/** next key-value in chain */[m
};

[1m[36m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *
add_key_value([1m[32mstruct[m KeyValue *keyValues, [1m[32mconst[m [1m[32mchar[m *k, [1m[32mint[m v)
{
  [1m[36m//allocate storage for new KeyValue struct[m
  [1m[32mstruct[m KeyValue *kv = malloc([1m[33msizeof[m([1m[32mstruct[m KeyValue *));

  [1m[36m//allocate storage for string pointed to by k[m
  [1m[32mchar[m *s = malloc(strlen(k));

  [1m[33mif[m (kv == [1m[35mNULL[m || s == [1m[35mNULL[m) { [1m[36m//check if allocations succeeded[m
    fprintf([1m[35mstderr[m, [1m[35m"malloc failure: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));
    exit([1m[35m1[m);
  }
  strcpy(s, k);  [1m[36m//copy string k into newly allocated memory pointed to by s

[m  [1m[36m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [1m[33mreturn[m kv;
}

[1m[36m/** Free all the key-value's in keyValues. */[m
[1m[32mstatic[m [1m[32mvoid[m
free_key_values([1m[32mstruct[m KeyValue *keyValues)
{
  [1m[36m//go thru chain of keyValues[m
  [1m[33mfor[m ([1m[32mstruct[m KeyValue *p = keyValues; p != [1m[35mNULL[m;) {
    [1m[32mstruct[m KeyValue *tmp = p;
    p = keyValues->succ;
    free(tmp); [1m[36m//free KeyValue struct[m
    free(([1m[32mchar[m *)tmp->key);
  }
}

[1m[36m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *
make_key_values([1m[32mvoid[m) {
  [1m[32mconst[m [1m[32mchar[m *keys[] = {
    [1m[35m"twas"[m, [1m[35m"brillig"[m, [1m[35m"and"[m, [1m[35m"the"[m, [1m[35m"slithy"[m, [1m[35m"toves"[m,
    [1m[35m"did"[m, [1m[35m"gyre"[m, [1m[35m"and"[m, [1m[35m"gimble"[m, [1m[35m"in"[m, [1m[35m"the"[m, [1m[35m"wabe"[m,
    [1m[35m"all"[m, [1m[35m"mimsy"[m, [1m[35m"were"[m, [1m[35m"the"[m, [1m[35m"borogoves"[m,
    [1m[35m"and"[m, [1m[35m"the"[m, [1m[35m"mome"[m, [1m[35m"raths"[m, [1m[35m"outgrabe"[m,
  };
  [1m[32mstruct[m KeyValue *p = [1m[35mNULL[m;
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < [1m[33msizeof[m(keys)/[1m[33msizeof[m(keys[[1m[35m0[m]); i++) {
    p = add_key_value(p, keys[i], i);
  }
  [1m[33mreturn[m p;
}

[1m[36m/** Print out all the words in the first verse of Carroll's Jabberwocky
 *  paired with their index in the verse.[m[71;100H44,28[9CTop[44;28H[?25h[?25l[71;104H9[44;29H[?25h[?25l[71;90HY[44;29H[71;90H [44;29H[71;90Hyy[44;29H[71;90H  [44;29H[?25h[?25l[71;90H~@k[44;29H[71;90H   [44;28H[71;104H8[44;28H[?25h[?25l[71;90HK[44;28H[71;1H:! man 'p'[71;90H[K[71;11H[?2004l[?1l>[?25h[?1049l[23;0;0t
[?1006l[?1002l[?2004lEYNo manual entry for p
[?1006h[?1002h[?2004h
shell returned 16

Press ENTER or type command to continue[?1006l[?1002l[?1006h[?1002h[?1049h[22;0;0t[?1h=[?2004h[?25l[44;28H[27m[23m[29m[m[H[2J[1;1H[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m
[1m[34m#include [m[1m[35m<string.h>[m

[1m[36m/** A struct used to form a linear chain of key-value pairs. */[m
[1m[32mstruct[m KeyValue {
  [1m[32mconst[m [1m[32mchar[m *key;[7C[1m[36m/** string key */[m
  [1m[32mint[m value;[13C[1m[36m/** integer value */[m
  [1m[32mstruct[m KeyValue *succ; [1m[36m/** next key-value in chain */[m
};

[1m[36m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *
add_key_value([1m[32mstruct[m KeyValue *keyValues, [1m[32mconst[m [1m[32mchar[m *k, [1m[32mint[m v)
{
  [1m[36m//allocate storage for new KeyValue struct[m
  [1m[32mstruct[m KeyValue *kv = malloc([1m[33msizeof[m([1m[32mstruct[m KeyValue *));

  [1m[36m//allocate storage for string pointed to by k[m
  [1m[32mchar[m *s = malloc(strlen(k));

  [1m[33mif[m (kv == [1m[35mNULL[m || s == [1m[35mNULL[m) { [1m[36m//check if allocations succeeded[m
    fprintf([1m[35mstderr[m, [1m[35m"malloc failure: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));
    exit([1m[35m1[m);
  }
  strcpy(s, k);  [1m[36m//copy string k into newly allocated memory pointed to by s

[m  [1m[36m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [1m[33mreturn[m kv;
}

[1m[36m/** Free all the key-value's in keyValues. */[m
[1m[32mstatic[m [1m[32mvoid[m
free_key_values([1m[32mstruct[m KeyValue *keyValues)
{
  [1m[36m//go thru chain of keyValues[m
  [1m[33mfor[m ([1m[32mstruct[m KeyValue *p = keyValues; p != [1m[35mNULL[m;) {
    [1m[32mstruct[m KeyValue *tmp = p;
    p = keyValues->succ;
    free(tmp); [1m[36m//free KeyValue struct[m
    free(([1m[32mchar[m *)tmp->key);
  }
}

[1m[36m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *
make_key_values([1m[32mvoid[m) {
  [1m[32mconst[m [1m[32mchar[m *keys[] = {
    [1m[35m"twas"[m, [1m[35m"brillig"[m, [1m[35m"and"[m, [1m[35m"the"[m, [1m[35m"slithy"[m, [1m[35m"toves"[m,
    [1m[35m"did"[m, [1m[35m"gyre"[m, [1m[35m"and"[m, [1m[35m"gimble"[m, [1m[35m"in"[m, [1m[35m"the"[m, [1m[35m"wabe"[m,
    [1m[35m"all"[m, [1m[35m"mimsy"[m, [1m[35m"were"[m, [1m[35m"the"[m, [1m[35m"borogoves"[m,
    [1m[35m"and"[m, [1m[35m"the"[m, [1m[35m"mome"[m, [1m[35m"raths"[m, [1m[35m"outgrabe"[m,
  };
  [1m[32mstruct[m KeyValue *p = [1m[35mNULL[m;
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < [1m[33msizeof[m(keys)/[1m[33msizeof[m(keys[[1m[35m0[m]); i++) {
    p = add_key_value(p, keys[i], i);
  }
  [1m[33mreturn[m p;
}

[1m[36m/** Print out all the words in the first verse of Carroll's Jabberwocky
 *  paired with their index in the verse.[m[71;100H44,28[9CTop[44;28H[?25h[?25l[71;104H9[44;29H[?25h[?25l[71;90HY[44;29H[71;90H [44;29H[71;90Hyy[44;29H[71;90H  [44;29H[?25h[?25l[71;101H5,24[45;24H[?25h[?25l[71;101H4,29[44;29H[?25h[?25l[71;90H~@k[44;29H[71;90H   [44;28H[71;104H8[44;28H[?25h[?25l[71;90HK[44;28H[71;1H:! man 'p'[71;90H[K[71;11H[?2004l[?1l>[?25h[?1049l[23;0;0t
[?1006l[?1002l[?2004lEYNo manual entry for p
[?1006h[?1002h[?2004h
shell returned 16

Press ENTER or type command to continue[?1006l[?1002l[?1006h[?1002h[?1049h[22;0;0t[?1h=[?2004h[?25l[44;28H[27m[23m[29m[m[H[2J[1;1H[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m
[1m[34m#include [m[1m[35m<string.h>[m

[1m[36m/** A struct used to form a linear chain of key-value pairs. */[m
[1m[32mstruct[m KeyValue {
  [1m[32mconst[m [1m[32mchar[m *key;[7C[1m[36m/** string key */[m
  [1m[32mint[m value;[13C[1m[36m/** integer value */[m
  [1m[32mstruct[m KeyValue *succ; [1m[36m/** next key-value in chain */[m
};

[1m[36m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *
add_key_value([1m[32mstruct[m KeyValue *keyValues, [1m[32mconst[m [1m[32mchar[m *k, [1m[32mint[m v)
{
  [1m[36m//allocate storage for new KeyValue struct[m
  [1m[32mstruct[m KeyValue *kv = malloc([1m[33msizeof[m([1m[32mstruct[m KeyValue *));

  [1m[36m//allocate storage for string pointed to by k[m
  [1m[32mchar[m *s = malloc(strlen(k));

  [1m[33mif[m (kv == [1m[35mNULL[m || s == [1m[35mNULL[m) { [1m[36m//check if allocations succeeded[m
    fprintf([1m[35mstderr[m, [1m[35m"malloc failure: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));
    exit([1m[35m1[m);
  }
  strcpy(s, k);  [1m[36m//copy string k into newly allocated memory pointed to by s

[m  [1m[36m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [1m[33mreturn[m kv;
}

[1m[36m/** Free all the key-value's in keyValues. */[m
[1m[32mstatic[m [1m[32mvoid[m
free_key_values([1m[32mstruct[m KeyValue *keyValues)
{
  [1m[36m//go thru chain of keyValues[m
  [1m[33mfor[m ([1m[32mstruct[m KeyValue *p = keyValues; p != [1m[35mNULL[m;) {
    [1m[32mstruct[m KeyValue *tmp = p;
    p = keyValues->succ;
    free(tmp); [1m[36m//free KeyValue struct[m
    free(([1m[32mchar[m *)tmp->key);
  }
}

[1m[36m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *
make_key_values([1m[32mvoid[m) {
  [1m[32mconst[m [1m[32mchar[m *keys[] = {
    [1m[35m"twas"[m, [1m[35m"brillig"[m, [1m[35m"and"[m, [1m[35m"the"[m, [1m[35m"slithy"[m, [1m[35m"toves"[m,
    [1m[35m"did"[m, [1m[35m"gyre"[m, [1m[35m"and"[m, [1m[35m"gimble"[m, [1m[35m"in"[m, [1m[35m"the"[m, [1m[35m"wabe"[m,
    [1m[35m"all"[m, [1m[35m"mimsy"[m, [1m[35m"were"[m, [1m[35m"the"[m, [1m[35m"borogoves"[m,
    [1m[35m"and"[m, [1m[35m"the"[m, [1m[35m"mome"[m, [1m[35m"raths"[m, [1m[35m"outgrabe"[m,
  };
  [1m[32mstruct[m KeyValue *p = [1m[35mNULL[m;
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < [1m[33msizeof[m(keys)/[1m[33msizeof[m(keys[[1m[35m0[m]); i++) {
    p = add_key_value(p, keys[i], i);
  }
  [1m[33mreturn[m p;
}

[1m[36m/** Print out all the words in the first verse of Carroll's Jabberwocky
 *  paired with their index in the verse.[m[71;100H44,28[9CTop[44;28H[?25h[?25l[71;104H9[44;29H[?25h[?25l[71;90HY[44;29H[71;90H [44;29H[71;90Hyy[44;29H[71;90H  [44;29H[?25h[?25l[71;90Hk[44;29H[71;90H [43;29H[71;101H3[43;29H[?25h[?25l[71;90H~@k[43;29H[71;90H   [44;29H[71;101H4[44;29H[?25h[?25l[71;90H~@k[44;29H[71;90H   [44;28H[71;104H8[44;28H[?25h[?25l[71;90H~@k[44;28H[71;90H   [44;29H[71;104H9[44;29H[?25h[?25l[71;90Hi[44;29H[71;90H [44;29H[71;1H[1m-- INSERT --[m[71;100H[K[71;100H44,29[9CTop[44;29H[?25h[?25l;[44;29H[K[71;104H8[44;28H[?25h[?25lk;[71;104H9[44;29H[?25h[?25le;[71;103H30[44;30H[?25h[?25ly;[71;104H1[44;31H[?25h[?25lV;[71;104H2[44;32H[?25h[?25la;[71;104H3[44;33H[?25h[?25ll;[71;104H4[44;34H[?25h[?25lu;[71;104H5[44;35H[?25h[?25le;[71;104H6[44;36H[?25h[?25ls;[71;104H7[44;37H[?25h[?25l[71;103H25[44;25H[?25h[?25l = keyValues;[44;37H[K[71;104H4[44;24H[?25h[?25l = keyValues;[44;36H[K[71;104H3[44;23H[?25h[?25l = keyValues;[44;35H[K[71;104H2[44;22H[?25h[?25lp = keyValues;[71;104H3[44;23H[?25h[?25l[71;104H1[44;21H[?25h[?25l[71;104H2[44;22H[?25h[?25lp = keyValues;[44;35H[K[71;104H1[44;21H[?25h[?25lp = keyValues;[44;34H[K[71;104H0[44;20H[?25h[?25lp = keyValues;[44;33H[K[71;103H19[44;19H[?25h[?25lp = keyValues;[44;31H[K[71;104H7[44;17H[?25h[?25lp = keyValues;[44;30H[K[71;104H6[44;16H[?25h[?25lp = keyValues;[44;29H[K[71;104H5[44;15H[?25h[?25lp = keyValues;[44;28H[K[71;104H4[44;14H[?25h[?25lp = keyValues;[44;26H[K[71;104H2[44;12H[?25h[?25l    structp = keyValues;[44;25H[K[71;104H1[44;11H[?25h[?25lp = keyValues;[44;24H[K[71;104H0[44;10H[?25h[?25lp = keyValues;[44;23H[K[71;103H9 [44;9H[?25h[?25lp = keyValues;[44;22H[K[71;103H8[44;8H[?25h[?25lp = keyValues;[44;21H[K[71;103H7[44;7H[?25h[?25lp = keyValues;[44;20H[K[71;103H6[44;6H[?25h[?25lp = keyValues;[44;19H[K[71;103H5[44;5H[?25h[?25l[71;101H5,6[45;6H[?25h[?25l = keyValues->succ;[45;24H[K[71;103H5[45;5H[?25h[?25lk = keyValues->succ;[71;103H6[45;6H[?25h[?25le = keyValues->succ;[71;103H7[45;7H[?25h[?25ly = keyValues->succ;[71;103H8[45;8H[?25h[?25lV = keyValues->succ;[71;103H9[45;9H[?25h[?25lal = keyValues->succ;[71;103H11[45;11H[?25h[?25lu = keyValues->succ;[71;104H2[45;12H[?25h[?25le = keyValues->succ;[71;104H3[45;13H[?25h[?25ls = keyValues->succ;[71;104H4[45;14H[?25h[?25l[46;9H[46m([mtmp[46m)[m[71;101H6,13[46;13H[?25h[?25l)[46m;[m [1m[36m//free KeyValue struct[m[46;37H[K[46;12H[46m)[m;[71;104H2[46;12H[?25h[?25l)[46m;[m [1m[36m//free KeyValue struct[m[46;36H[K[46;11H[46m)[m;[71;104H1[46;11H[?25h[?25l)[46m;[m [1m[36m//free KeyValue struct[m[46;35H[K[46;10H[46m)[m;[71;104H0[46;10H[?25h[?25l[46mp[m); [1m[36m//free KeyValue struct[m[46;10Hp[46m)[m[71;104H1[46;11H[?25h[?25l(p)[71;101H7,2[47;21H[?25h[?25l->key);[47;27H[K[71;104H0[47;20H[?25h[?25l->key);[47;26H[K[71;103H19[47;19H[?25h[?25l->key);[47;25H[K[47;10H[46m([6C)[m[71;104H8[47;18H[?25h[?25lp->key);[47;10H([6C)[71;104H9[47;19H[?25h[71;1H[K[47;18H[?25l[71;90H^[[47;18H[71;90H  [47;19H[71;100H47,18[9CTop[47;18H[?25h[?25l[71;90H:[47;18H[71;90H[K[71;1H:[?2004h[?25hw[?25l[?25hq[?25l[?25h[?25l[?1006l[?1002l[?2004l"bug-program.c" 79L, 2265C written[23;2t[23;1t[22;2t[22;1t[23;2t[23;1t[?2004l[?1l>[?25h[?1049l[23;0;0t
rgeary1@remote00:~/i220a/submit/lab10/exercises/bug-program$ make
cc -g -Wall -std=c11 -O1    bug-program.c   -o bug-program
rgeary1@remote00:~/i220a/submit/lab10/exercises/bug-program$ makevim bug-program.cvalgrind algrind -v --leak-check=yes ./bug-program 2>bug-program.valgrind
outgrabe: 22
raths: 21
mome: 20
the: 19
and: 18
borogoves: 17
the: 16
were: 15
mimsy: 14
all: 13
wabe: 12
the: 11
in: 10
gimble: 9
and: 8
gyre: 7
did: 6
toves: 5
slithy: 4
the: 3
and: 2
brillig: 1
twas: 0
Segmentation fault
rgeary1@remote00:~/i220a/submit/lab10/exercises/bug-program$ valgrind -v --leak-check=yes ./bug-program 2>bug-program.valgrind[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cmake[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cvim bug-program.cvalgrind algrind -v --leak-check=yes ./bug-program 2>bug-program.valgrind[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cmake[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cvalgrind -v --leak-check=yes ./bug-program 2>bug-program.valgrind
outgrabe: 22
raths: 21
mome: 20
the: 19
and: 18
borogoves: 17
the: 16
were: 15
mimsy: 14
all: 13
wabe: 12
the: 11
in: 10
gimble: 9
and: 8
gyre: 7
did: 6
toves: 5
slithy: 4
the: 3
and: 2
brillig: 1
twas: 0
Segmentation fault
rgeary1@remote00:~/i220a/submit/lab10/exercises/bug-program$ valgrind -v --leak-check=yes ./bug-program 2>bug-program.valgrind[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cmake[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cvim bug-program.cvalgrind 
[?1000h[?2004h[?1049h[22;0;0t[?1h=[?2004h[1;71r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[71;1H"bug-program.valgrind" 289L, 17504C[2;1Hâ–½[6n[2;1H  [1;1H[>c]10;?]11;?[1;1H==3064693== Memcheck, a memory error detector
==3064693== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==3064693== Using Valgrind-3.14.0-353a3587bb-20181007X and LibVEX; rerun with -h for copyright info
==3064693== Command: ./bug-program
==3064693==
--3064693-- Valgrind options:
--3064693--    -v
--3064693--    --leak-check=yes
--3064693-- Contents of /proc/version:
--3064693--   Linux version 5.7.0-0.bpo.2-amd64 (debian-kernel@lists.debian.org) (gcc version 8.3.0 (Debian 8.3.0-6),,[11;1H GNU ld (GNU Binutils for Debian) 2.31.1) #1 SMP Debian 5.7.10-1~bpo10+1 (2020-07-30)
--3064693--
--3064693-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-avx-avx2-bmi
--3064693-- Page sizes: currently 4096, max supported 4096
--3064693-- Valgrind library directory: /usr/lib/x86_64-linux-gnu/valgrind
--3064693-- Reading syms from /import/linux/home1/rgeary1/projects/i220a/submit/lab10/exercises/bug-program/bug-progrr[17;1Ham
--3064693-- Reading syms from /lib/x86_64-linux-gnu/ld-2.28.so
--3064693--   Considering /usr/lib/debug/.build-id/f2/5dfd7b95be4ba386fd71080accae8c0732b711.debug ..
--3064693--   .. build-id is valid
--3064693-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux
--3064693--   Considering /usr/lib/debug/.build-id/32/2e77af97f403c3d34ff09edf60b089e72ec889.debug ..
--3064693--   .. build-id is valid
--3064693--    object doesn't have a dynamic symbol table
--3064693-- Scheduler: using generic scheduler lock implementation.
--3064693-- Reading suppressions file: /usr/lib/x86_64-linux-gnu/valgrind/default.supp
==3064693== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-3064693-by-rgeary1-on-???
==3064693== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-3064693-by-rgeary1-on-???
==3064693== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-3064693-by-rgeary1-on-???
==3064693==
==3064693== TO CONTROL THIS PROCESS USING vgdb (which you probably
==3064693== don't want to do, unless you know exactly what you're doing,
==3064693== or are doing some strange experiment):
==3064693==   /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=3064693 ...command...
==3064693==
==3064693== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==3064693==   /path/to/gdb ./bug-program
==3064693== and then give GDB the following command
==3064693==   target remote | /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=3064693
==3064693== --pid is optional if only one valgrind process is running
==3064693==
--3064693-- REDIR: 0x401e2f0 (ld-linux-x86-64.so.2:strlen) redirected to 0x580c9ce2 (vgPlain_amd64_linux_REDIR_FOR_stt[43;1Hrlen)
--3064693-- REDIR: 0x401e0d0 (ld-linux-x86-64.so.2:index) redirected to 0x580c9cfc (vgPlain_amd64_linux_REDIR_FOR_indd[45;1Hex)
--3064693-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so
--3064693--   Considering /usr/lib/debug/.build-id/34/fbc4cdfbfce1bfc3d2e522a01a050bf724c930.debug ..
--3064693--   .. build-id is valid
--3064693-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
--3064693--   Considering /usr/lib/debug/.build-id/ca/bb7898ea982d936cbfadd70ae831c6eb63623f.debug ..
--3064693--   .. build-id is valid
==3064693== WARNING: new redirection conflicts with existing -- ignoring it
--3064693--     old: 0x0401e2f0 (strlen[14C) R-> (0000.0) 0x580c9ce2 vgPlain_amd64_linux_REDIR_FOR_strlen
--3064693--     new: 0x0401e2f0 (strlen[14C) R-> (2007.0) 0x04838d80 strlen
--3064693-- REDIR: 0x401ab10 (ld-linux-x86-64.so.2:strcmp) redirected to 0x4839e40 (strcmp)
--3064693-- REDIR: 0x401e830 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x483d860 (mempcpy)
--3064693-- Reading syms from /lib/x86_64-linux-gnu/libc-2.28.so
--3064693--   Considering /usr/lib/debug/.build-id/18/b9a9a8c523e5cfe5b5d946d605d09242f09798.debug ..
--3064693--   .. build-id is valid
--3064693-- REDIR: 0x4906f70 (libc.so.6:memmove) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x4906160 (libc.so.6:strncpy) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x4907250 (libc.so.6:strcasecmp) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x4905b70 (libc.so.6:strcat) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x4906190 (libc.so.6:rindex) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x4908890 (libc.so.6:rawmemchr) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x4921230 (libc.so.6:wmemchr) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x4920cd0 (libc.so.6:wcscmp) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x49070e0 (libc.so.6:mempcpy) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x4906f10 (libc.so.6:bcmp) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x4906100 (libc.so.6:strncmp) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)[71;100H1,1[11CTop[1;1H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[27m[23m[29m[m[H[2J[?25l[1;1H==3064693== Memcheck, a memory error detector
==3064693== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==3064693== Using Valgrind-3.14.0-353a3587bb-20181007X and LibVEX; rerun with -h for copyright info
==3064693== Command: ./bug-program
==3064693==
--3064693-- Valgrind options:
--3064693--    -v
--3064693--    --leak-check=yes
--3064693-- Contents of /proc/version:
--3064693--   Linux version 5.7.0-0.bpo.2-amd64 (debian-kernel@lists.debian.org) (gcc version 8.3.0 (Debian 8.3.0-6),,[11;1H GNU ld (GNU Binutils for Debian) 2.31.1) #1 SMP Debian 5.7.10-1~bpo10+1 (2020-07-30)
--3064693--
--3064693-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-avx-avx2-bmi
--3064693-- Page sizes: currently 4096, max supported 4096
--3064693-- Valgrind library directory: /usr/lib/x86_64-linux-gnu/valgrind
--3064693-- Reading syms from /import/linux/home1/rgeary1/projects/i220a/submit/lab10/exercises/bug-program/bug-progrr[17;1Ham
--3064693-- Reading syms from /lib/x86_64-linux-gnu/ld-2.28.so
--3064693--   Considering /usr/lib/debug/.build-id/f2/5dfd7b95be4ba386fd71080accae8c0732b711.debug ..
--3064693--   .. build-id is valid
--3064693-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux
--3064693--   Considering /usr/lib/debug/.build-id/32/2e77af97f403c3d34ff09edf60b089e72ec889.debug ..
--3064693--   .. build-id is valid
--3064693--    object doesn't have a dynamic symbol table
--3064693-- Scheduler: using generic scheduler lock implementation.
--3064693-- Reading suppressions file: /usr/lib/x86_64-linux-gnu/valgrind/default.supp
==3064693== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-3064693-by-rgeary1-on-???
==3064693== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-3064693-by-rgeary1-on-???
==3064693== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-3064693-by-rgeary1-on-???
==3064693==
==3064693== TO CONTROL THIS PROCESS USING vgdb (which you probably
==3064693== don't want to do, unless you know exactly what you're doing,
==3064693== or are doing some strange experiment):
==3064693==   /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=3064693 ...command...
==3064693==
==3064693== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==3064693==   /path/to/gdb ./bug-program
==3064693== and then give GDB the following command
==3064693==   target remote | /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=3064693
==3064693== --pid is optional if only one valgrind process is running
==3064693==
--3064693-- REDIR: 0x401e2f0 (ld-linux-x86-64.so.2:strlen) redirected to 0x580c9ce2 (vgPlain_amd64_linux_REDIR_FOR_stt[43;1Hrlen)
--3064693-- REDIR: 0x401e0d0 (ld-linux-x86-64.so.2:index) redirected to 0x580c9cfc (vgPlain_amd64_linux_REDIR_FOR_indd[45;1Hex)
--3064693-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so
--3064693--   Considering /usr/lib/debug/.build-id/34/fbc4cdfbfce1bfc3d2e522a01a050bf724c930.debug ..
--3064693--   .. build-id is valid
--3064693-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
--3064693--   Considering /usr/lib/debug/.build-id/ca/bb7898ea982d936cbfadd70ae831c6eb63623f.debug ..
--3064693--   .. build-id is valid
==3064693== WARNING: new redirection conflicts with existing -- ignoring it
--3064693--     old: 0x0401e2f0 (strlen[14C) R-> (0000.0) 0x580c9ce2 vgPlain_amd64_linux_REDIR_FOR_strlen
--3064693--     new: 0x0401e2f0 (strlen[14C) R-> (2007.0) 0x04838d80 strlen
--3064693-- REDIR: 0x401ab10 (ld-linux-x86-64.so.2:strcmp) redirected to 0x4839e40 (strcmp)
--3064693-- REDIR: 0x401e830 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x483d860 (mempcpy)
--3064693-- Reading syms from /lib/x86_64-linux-gnu/libc-2.28.so
--3064693--   Considering /usr/lib/debug/.build-id/18/b9a9a8c523e5cfe5b5d946d605d09242f09798.debug ..
--3064693--   .. build-id is valid
--3064693-- REDIR: 0x4906f70 (libc.so.6:memmove) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x4906160 (libc.so.6:strncpy) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x4907250 (libc.so.6:strcasecmp) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x4905b70 (libc.so.6:strcat) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x4906190 (libc.so.6:rindex) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x4908890 (libc.so.6:rawmemchr) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x4921230 (libc.so.6:wmemchr) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x4920cd0 (libc.so.6:wcscmp) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x49070e0 (libc.so.6:mempcpy) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x4906f10 (libc.so.6:bcmp) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x4906100 (libc.so.6:strncmp) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)[71;100H1,1[11CTop"bug-program.valgrind" 289L, 17504C[1;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H--3064693-- REDIR: 0x4905be0 (libc.so.6:strcmp) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x4907040 (libc.so.6:memset) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x4920ca0 (libc.so.6:wcschr) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)[71;1H[K[71;100H9,1[12C1%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H--3064693-- REDIR: 0x49060a0 (libc.so.6:strnlen) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x4905c70 (libc.so.6:strcspn) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x49072a0 (libc.so.6:strncasecmp) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)[71;100H[K[71;100H11,1[11C2%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H--3064693-- REDIR: 0x4905c40 (libc.so.6:strcpy) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x49073e0 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x49224d0 (libc.so.6:wcsnlen) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)[71;100H[K[71;100H14,1[11C4%[6;1H[?25h[?25l[1;70r[1;1H[4M[1;71r[67;1H--3064693-- REDIR: 0x49061c0 (libc.so.6:strpbrk) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x4905ba0 (libc.so.6:index) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x4906070 (libc.so.6:strlen) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x490d280 (libc.so.6:memrchr) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)[71;100H[K[71;100H17,1[11C5%[6;1H[?25h[?25l[1;70r[1;1H[4M[1;71r[67;1H--3064693-- REDIR: 0x49072f0 (libc.so.6:strcasecmp_l) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x4906ee0 (libc.so.6:memchr) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x4920db0 (libc.so.6:wcslen) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x4906460 (libc.so.6:strspn) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)[71;100H[K[71;100H21,1[11C6%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H--3064693-- REDIR: 0x4907220 (libc.so.6:stpncpy) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x49071f0 (libc.so.6:stpcpy) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x49088c0 (libc.so.6:strchrnul) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)[71;100H[K[71;100H24,1[11C8%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H--3064693-- REDIR: 0x4907340 (libc.so.6:strncasecmp_l) redirected to 0x482d1b0 (_vgnU_ifunc_wrapper)
--3064693-- REDIR: 0x49d9fa0 (libc.so.6:__strrchr_avx2) redirected to 0x4838790 (rindex)
--3064693-- REDIR: 0x4902350 (libc.so.6:malloc) redirected to 0x4835710 (malloc)[71;100H[K[71;100H27,1[11C9%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H--3064693-- REDIR: 0x491b100 (libc.so.6:__strcpy_sse2_unaligned) redirected to 0x4838db0 (strcpy)
==3064693== Invalid write of size 1
==3064693==    at 0x4838DD7: strcpy (vg_replace_strmem.c:512)[71;100H[K[71;100H30,1[10C10%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    by 0x10930E: add_key_value (bug-program.c:30)
==3064693==    by 0x10930E: make_key_values (bug-program.c:64)
==3064693==    by 0x10930E: main (bug-program.c:73)[71;100H[K[71;100H33,1[10C12%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==  Address 0x4a42094 is 0 bytes after a block of size 4 alloc'd
==3064693==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==3064693==    by 0x1092F6: add_key_value (bug-program.c:24)[71;100H[K[71;100H36,1[10C13%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    by 0x1092F6: make_key_values (bug-program.c:64)
==3064693==    by 0x1092F6: main (bug-program.c:73)
==3064693==[71;100H[K[71;100H39,1[10C14%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693== Invalid write of size 4
==3064693==    at 0x109312: add_key_value (bug-program.c:33)
==3064693==    by 0x109312: make_key_values (bug-program.c:64)[71;100H[K[71;100H41,1[10C16%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    by 0x109312: main (bug-program.c:73)
==3064693==  Address 0x4a42048 is 0 bytes after a block of size 8 alloc'd
==3064693==    at 0x483577F: malloc (vg_replace_malloc.c:299)[71;100H[K[71;100H43,1[10C17%[6;1H[?25h[?25l[1;70r[1;1H[5M[1;71r[66;1H==3064693==    by 0x1092D3: add_key_value (bug-program.c:21)
==3064693==    by 0x1092D3: make_key_values (bug-program.c:64)
==3064693==    by 0x1092D3: main (bug-program.c:73)
==3064693==
==3064693== Invalid write of size 8[71;100H[K[71;100H48,1[10C19%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    at 0x109315: add_key_value (bug-program.c:33)
==3064693==    by 0x109315: make_key_values (bug-program.c:64)
==3064693==    by 0x109315: main (bug-program.c:73)[71;100H[K[71;100H51,1[10C20%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==  Address 0x4a42050 is 8 bytes after a block of size 8 alloc'd
==3064693==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==3064693==    by 0x1092D3: add_key_value (bug-program.c:21)[71;100H[K[71;100H54,1[10C21%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    by 0x1092D3: make_key_values (bug-program.c:64)
==3064693==    by 0x1092D3: main (bug-program.c:73)
==3064693==[71;100H[K[71;100H57,1[10C23%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693== Invalid read of size 4
==3064693==    at 0x109330: main (bug-program.c:75)
==3064693==  Address 0x4a42e08 is 0 bytes after a block of size 8 alloc'd[71;100H[K[71;100H60,1[10C24%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==3064693==    by 0x1092D3: add_key_value (bug-program.c:21)
==3064693==    by 0x1092D3: make_key_values (bug-program.c:64)[71;100H[K[71;100H63,1[10C26%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    by 0x1092D3: main (bug-program.c:73)
==3064693==
--3064693-- REDIR: 0x49d9db0 (libc.so.6:__strchrnul_avx2) redirected to 0x483d390 (strchrnul)[71;100H[K[71;100H66,1[10C27%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H--3064693-- REDIR: 0x49da170 (libc.so.6:__strlen_avx2) redirected to 0x4838c60 (strlen)
==3064693== Invalid read of size 1
==3064693==    at 0x4838C74: strlen (vg_replace_strmem.c:460)[71;100H[K[71;100H69,1[10C28%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    by 0x48CF9EE: vfprintf (vfprintf.c:1638)
==3064693==    by 0x48D6605: printf (printf.c:33)
==3064693==    by 0x109343: main (bug-program.c:75)[71;100H[K[71;100H72,1[10C30%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==  Address 0x4a42e58 is 0 bytes after a block of size 8 alloc'd
==3064693==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==3064693==    by 0x1092F6: add_key_value (bug-program.c:24)[71;100H[K[71;100H75,1[10C31%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    by 0x1092F6: make_key_values (bug-program.c:64)
==3064693==    by 0x1092F6: main (bug-program.c:73)
==3064693==[71;100H[K[71;100H78,1[10C32%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H--3064693-- REDIR: 0x49da690 (libc.so.6:__mempcpy_avx_unaligned_erms) redirected to 0x483d4a0 (mempcpy)
==3064693== Invalid read of size 8
==3064693==    at 0x109344: main (bug-program.c:74)[71;100H[K[71;100H81,1[10C34%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==  Address 0x4a42e10 is 8 bytes after a block of size 8 alloc'd
==3064693==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==3064693==    by 0x1092D3: add_key_value (bug-program.c:21)[71;100H[K[71;100H84,1[10C35%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    by 0x1092D3: make_key_values (bug-program.c:64)
==3064693==    by 0x1092D3: main (bug-program.c:73)
==3064693==[71;100H[K[71;100H87,1[10C36%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693== Invalid read of size 8
==3064693==    at 0x10934D: free_key_values (bug-program.c:45)
==3064693==    by 0x10934D: main (bug-program.c:77)[71;100H[K[71;100H90,1[10C38%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==  Address 0x4a42e10 is 8 bytes after a block of size 8 alloc'd
==3064693==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==3064693==    by 0x1092D3: add_key_value (bug-program.c:21)[71;100H[K[71;100H93,1[10C39%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    by 0x1092D3: make_key_values (bug-program.c:64)
==3064693==    by 0x1092D3: main (bug-program.c:73)
==3064693==[71;100H[K[71;100H96,1[10C41%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H--3064693-- REDIR: 0x49029a0 (libc.so.6:free) redirected to 0x4836940 (free)
==3064693== Invalid read of size 8
==3064693==    at 0x109359: free_key_values (bug-program.c:47)[71;100H[K[71;100H99,1[10C42%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    by 0x109359: main (bug-program.c:77)
==3064693==  Address 0x4a42e00 is 0 bytes inside a block of size 8 free'd
==3064693==    at 0x48369AB: free (vg_replace_malloc.c:530)[71;100H[K[71;100H102,1[9C43%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    by 0x109358: free_key_values (bug-program.c:46)
==3064693==    by 0x109358: main (bug-program.c:77)
==3064693==  Block was alloc'd at[71;100H[K[71;100H105,1[9C45%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==3064693==    by 0x1092D3: add_key_value (bug-program.c:21)
==3064693==    by 0x1092D3: make_key_values (bug-program.c:64)[71;100H[K[71;100H108,1[9C46%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    by 0x1092D3: main (bug-program.c:73)
==3064693==
==3064693==[71;100H[K[71;100H111,1[9C47%[6;1H[?25h[?25l[71;90H^[[6;1H[71;92H[[6;1H[71;90H   [6;1H[1;70r[1;1H[3M[1;71r[68;1H==3064693== Process terminating with default action of signal 11 (SIGSEGV)
==3064693==  Access not within mapped region at address 0x10
==3064693==    at 0x10934D: free_key_values (bug-program.c:45)[71;100H[K[71;100H114,1[9C49%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    by 0x10934D: main (bug-program.c:77)
==3064693==  If you believe this happened as a result of a stack
==3064693==  overflow in your program's main thread (unlikely but[71;100H[K[71;100H117,1[9C50%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==  possible), you can try to increase the size of the
==3064693==  main thread stack using the --main-stacksize= flag.
==3064693==  The main thread stack size used in this run was 8388608.[71;100H[K[71;100H120,1[9C52%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==
==3064693== HEAP SUMMARY:
==3064693==     in use at exit: 0 bytes in 0 blocks[71;100H[K[71;100H123,1[9C53%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==   total heap usage: 47 allocs, 47 frees, 1,308 bytes allocated
==3064693==
==3064693== All heap blocks were freed -- no leaks are possible[71;100H[K[71;100H126,1[9C54%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==
==3064693== ERROR SUMMARY: 185 errors from 8 contexts (suppressed: 0 from 0)
==3064693==[71;100H[K[71;100H129,1[9C56%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693== 23 errors in context 1 of 8:
==3064693== Invalid read of size 8
==3064693==    at 0x109359: free_key_values (bug-program.c:47)[71;100H[K[71;100H132,1[9C57%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    by 0x109359: main (bug-program.c:77)
==3064693==  Address 0x4a42e00 is 0 bytes inside a block of size 8 free'd
==3064693==    at 0x48369AB: free (vg_replace_malloc.c:530)[71;100H[K[71;100H135,1[9C58%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    by 0x109358: free_key_values (bug-program.c:46)
==3064693==    by 0x109358: main (bug-program.c:77)
==3064693==  Block was alloc'd at[71;100H[K[71;100H138,1[9C60%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==3064693==    by 0x1092D3: add_key_value (bug-program.c:21)
==3064693==    by 0x1092D3: make_key_values (bug-program.c:64)[71;100H[K[71;100H141,1[9C61%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    by 0x1092D3: main (bug-program.c:73)
==3064693==
==3064693==[71;100H[K[71;100H144,1[9C63%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693== 23 errors in context 2 of 8:
==3064693== Invalid read of size 8
==3064693==    at 0x109344: main (bug-program.c:74)[71;100H[K[71;100H147,1[9C64%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==  Address 0x4a42e10 is 8 bytes after a block of size 8 alloc'd
==3064693==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==3064693==    by 0x1092D3: add_key_value (bug-program.c:21)[71;100H[K[71;100H150,1[9C65%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    by 0x1092D3: make_key_values (bug-program.c:64)
==3064693==    by 0x1092D3: main (bug-program.c:73)
==3064693==[71;100H[K[71;100H153,1[9C67%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==
==3064693== 23 errors in context 3 of 8:
==3064693== Invalid read of size 1[71;100H[K[71;100H156,1[9C68%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    at 0x4838C74: strlen (vg_replace_strmem.c:460)
==3064693==    by 0x48CF9EE: vfprintf (vfprintf.c:1638)
==3064693==    by 0x48D6605: printf (printf.c:33)[71;100H[K[71;100H159,1[9C69%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    by 0x109343: main (bug-program.c:75)
==3064693==  Address 0x4a42e58 is 0 bytes after a block of size 8 alloc'd
==3064693==    at 0x483577F: malloc (vg_replace_malloc.c:299)[71;100H[K[71;100H162,1[9C71%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    by 0x1092F6: add_key_value (bug-program.c:24)
==3064693==    by 0x1092F6: make_key_values (bug-program.c:64)
==3064693==    by 0x1092F6: main (bug-program.c:73)[71;100H[K[71;100H165,1[9C72%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==
==3064693==
==3064693== 23 errors in context 4 of 8:[71;100H[K[71;100H168,1[9C73%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693== Invalid read of size 4
==3064693==    at 0x109330: main (bug-program.c:75)
==3064693==  Address 0x4a42e08 is 0 bytes after a block of size 8 alloc'd[71;100H[K[71;100H171,1[9C75%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==3064693==    by 0x1092D3: add_key_value (bug-program.c:21)
==3064693==    by 0x1092D3: make_key_values (bug-program.c:64)[71;100H[K[71;100H174,1[9C76%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    by 0x1092D3: main (bug-program.c:73)
==3064693==
==3064693==[71;100H[K[71;100H177,1[9C78%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693== 23 errors in context 5 of 8:
==3064693== Invalid write of size 8
==3064693==    at 0x109315: add_key_value (bug-program.c:33)[71;100H[K[71;100H180,1[9C79%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    by 0x109315: make_key_values (bug-program.c:64)
==3064693==    by 0x109315: main (bug-program.c:73)
==3064693==  Address 0x4a42050 is 8 bytes after a block of size 8 alloc'd[71;100H[K[71;100H183,1[9C80%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==3064693==    by 0x1092D3: add_key_value (bug-program.c:21)
==3064693==    by 0x1092D3: make_key_values (bug-program.c:64)[71;100H[K[71;100H186,1[9C82%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    by 0x1092D3: main (bug-program.c:73)
==3064693==
==3064693==[71;100H[K[71;100H189,1[9C83%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693== 23 errors in context 6 of 8:
==3064693== Invalid write of size 4
==3064693==    at 0x109312: add_key_value (bug-program.c:33)[71;100H[K[71;100H192,1[9C84%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    by 0x109312: make_key_values (bug-program.c:64)
==3064693==    by 0x109312: main (bug-program.c:73)
==3064693==  Address 0x4a42048 is 0 bytes after a block of size 8 alloc'd[71;100H[K[71;100H195,1[9C86%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==3064693==    by 0x1092D3: add_key_value (bug-program.c:21)
==3064693==    by 0x1092D3: make_key_values (bug-program.c:64)[71;100H[K[71;100H198,1[9C87%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    by 0x1092D3: main (bug-program.c:73)
==3064693==
==3064693==[71;100H[K[71;100H201,1[9C89%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693== 23 errors in context 7 of 8:
==3064693== Invalid write of size 1
==3064693==    at 0x4838DD7: strcpy (vg_replace_strmem.c:512)[71;100H[K[71;100H204,1[9C90%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    by 0x10930E: add_key_value (bug-program.c:30)
==3064693==    by 0x10930E: make_key_values (bug-program.c:64)
==3064693==    by 0x10930E: main (bug-program.c:73)[71;100H[K[71;100H207,1[9C91%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==  Address 0x4a42094 is 0 bytes after a block of size 4 alloc'd
==3064693==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==3064693==    by 0x1092F6: add_key_value (bug-program.c:24)[71;100H[K[71;100H210,1[9C93%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    by 0x1092F6: make_key_values (bug-program.c:64)
==3064693==    by 0x1092F6: main (bug-program.c:73)
==3064693==[71;100H[K[71;100H213,1[9C94%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==
==3064693== 24 errors in context 8 of 8:
==3064693== Invalid read of size 8[71;100H[K[71;100H216,1[9C95%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    at 0x10934D: free_key_values (bug-program.c:45)
==3064693==    by 0x10934D: main (bug-program.c:77)
==3064693==  Address 0x4a42e10 is 8 bytes after a block of size 8 alloc'd[71;100H[K[71;100H219,1[9C97%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==3064693==    by 0x1092D3: add_key_value (bug-program.c:21)
==3064693==    by 0x1092D3: make_key_values (bug-program.c:64)[71;100H[K[71;100H222,1[9C98%[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H==3064693==    by 0x1092D3: main (bug-program.c:73)
==3064693==
==3064693== ERROR SUMMARY: 185 errors from 8 contexts (suppressed: 0 from 0)[71;100H[K[71;100H225,1[9CBot[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H[1m[34m~                                                                                                                    [69;1H~                                                                                                                    [70;1H~                                                                                                                    [m[71;100H[K[71;100H228,1[9CBot[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H[1m[34m~                                                                                                                    [69;1H~                                                                                                                    [70;1H~                                                                                                                    [m[71;100H[K[71;100H231,1[9CBot[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H[1m[34m~                                                                                                                    [69;1H~                                                                                                                    [70;1H~                                                                                                                    [m[71;100H[K[71;100H234,1[9CBot[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H[1m[34m~                                                                                                                    [69;1H~                                                                                                                    [70;1H~                                                                                                                    [m[71;100H[K[71;100H237,1[9CBot[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H[1m[34m~                                                                                                                    [69;1H~                                                                                                                    [70;1H~                                                                                                                    [m[71;100H[K[71;100H240,1[9CBot[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H[1m[34m~                                                                                                                    [69;1H~                                                                                                                    [70;1H~                                                                                                                    [m[71;100H[K[71;100H243,1[9CBot[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H[1m[34m~                                                                                                                    [69;1H~                                                                                                                    [70;1H~                                                                                                                    [m[71;100H[K[71;100H246,1[9CBot[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H[1m[34m~                                                                                                                    [69;1H~                                                                                                                    [70;1H~                                                                                                                    [m[71;100H[K[71;100H249,1[9CBot[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H[1m[34m~                                                                                                                    [69;1H~                                                                                                                    [70;1H~                                                                                                                    [m[71;100H[K[71;100H252,1[9CBot[6;1H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H[1m[34m~                                                                                                                    [69;1H~                                                                                                                    [70;1H~                                                                                                                    [m[71;100H[K[71;100H255,1[9CBot[6;1H[?25h[?25l[1;70r[1;1H[3L[1;71r[1;1H==3064693==  Address 0x4a42050 is 8 bytes after a block of size 8 alloc'd
==3064693==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==3064693==    by 0x1092D3: add_key_value (bug-program.c:21)[71;100H[K[71;100H255,1[9CBot[9;1H[?25h[?25l[1;70r[1;1H[3L[1;71r[1;1H==3064693==    at 0x109315: add_key_value (bug-program.c:33)
==3064693==    by 0x109315: make_key_values (bug-program.c:64)
==3064693==    by 0x109315: main (bug-program.c:73)[71;100H[K[71;100H255,1[9CBot[12;1H[?25h[?25l[71;90H^[[12;1H[71;90H  [12;1H[71;90H^[[12;1H[71;90H  [12;1H[?25h[?25l[71;90H:[12;1H[71;90H[K[71;1H:[?2004h[?25hw[?25l[?25hq[?25l[?25h[?25l[?1006l[?1002l[?2004l"bug-program.valgrind" 289L, 17504C written[23;2t[23;1t[22;2t[22;1t[23;2t[23;1t
[?2004l[?1l>[?25h[?1049l[23;0;0trgeary1@remote00:~/i220a/submit/lab10/exercises/bug-program$ vim bug-program.valgrind algrind -v --leak-check=yes ./bug-program 2>bug-program.valgrind[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cmake[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cvim bug-program.cvalgrind algrind -v --leak-check=yes ./bug-program 2>bug-program.valgrind[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cmake[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cvim bug-program.cmake[Kvim bug-program.c[2Pcd bug-program/[3Pexercisesbug-program/vim bug-program.cmake[Kvim bug-program.c
[?1000h[?2004h[?1049h[22;0;0t[?1h=[?2004h[1;71r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[71;1H"bug-program.c" 79L, 2265C[2;1Hâ–½[6n[2;1H  [1;1H[>c]10;?]11;?[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([33msizeof[m([32mstruct[m KeyValue *));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k));

  [33mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [33mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [33mfor[m ([32mstruct[m KeyValue *p = keyValues; p != [31mNULL[m;) {
    p = keyValues;
    keyValues = keyValues->succ;
    free(p); [34m//free KeyValue struct[m
    free(([32mchar[m *)p->key);
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
make_key_values([32mvoid[m) {
  [32mconst[m [32mchar[m *keys[] = {
    [31m"twas"[m, [31m"brillig"[m, [31m"and"[m, [31m"the"[m, [31m"slithy"[m, [31m"toves"[m,
    [31m"did"[m, [31m"gyre"[m, [31m"and"[m, [31m"gimble"[m, [31m"in"[m, [31m"the"[m, [31m"wabe"[m,
    [31m"all"[m, [31m"mimsy"[m, [31m"were"[m, [31m"the"[m, [31m"borogoves"[m,
    [31m"and"[m, [31m"the"[m, [31m"mome"[m, [31m"raths"[m, [31m"outgrabe"[m,
  };
  [32mstruct[m KeyValue *p = [31mNULL[m;
  [33mfor[m ([32mint[m i = [31m0[m; i < [33msizeof[m(keys)/[33msizeof[m(keys[[31m0[m]); i++) {
    p = add_key_value(p, keys[i], i);
  }
  [33mreturn[m p;
}

[34m/** Print out all the words in the first verse of Carroll's Jabberwocky
 *  paired with their index in the verse.[m[71;100H47,18[9CTop[47;18H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[27m[23m[29m[m[H[2J[?25l[1;1H[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m
[1m[34m#include [m[1m[35m<string.h>[m

[1m[36m/** A struct used to form a linear chain of key-value pairs. */[m
[1m[32mstruct[m KeyValue {
  [1m[32mconst[m [1m[32mchar[m *key;[7C[1m[36m/** string key */[m
  [1m[32mint[m value;[13C[1m[36m/** integer value */[m
  [1m[32mstruct[m KeyValue *succ; [1m[36m/** next key-value in chain */[m
};

[1m[36m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *
add_key_value([1m[32mstruct[m KeyValue *keyValues, [1m[32mconst[m [1m[32mchar[m *k, [1m[32mint[m v)
{
  [1m[36m//allocate storage for new KeyValue struct[m
  [1m[32mstruct[m KeyValue *kv = malloc([1m[33msizeof[m([1m[32mstruct[m KeyValue *));

  [1m[36m//allocate storage for string pointed to by k[m
  [1m[32mchar[m *s = malloc(strlen(k));

  [1m[33mif[m (kv == [1m[35mNULL[m || s == [1m[35mNULL[m) { [1m[36m//check if allocations succeeded[m
    fprintf([1m[35mstderr[m, [1m[35m"malloc failure: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));
    exit([1m[35m1[m);
  }
  strcpy(s, k);  [1m[36m//copy string k into newly allocated memory pointed to by s

[m  [1m[36m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [1m[33mreturn[m kv;
}

[1m[36m/** Free all the key-value's in keyValues. */[m
[1m[32mstatic[m [1m[32mvoid[m
free_key_values([1m[32mstruct[m KeyValue *keyValues)
{
  [1m[36m//go thru chain of keyValues[m
  [1m[33mfor[m ([1m[32mstruct[m KeyValue *p = keyValues; p != [1m[35mNULL[m;) {
    p = keyValues;
    keyValues = keyValues->succ;
    free(p); [1m[36m//free KeyValue struct[m
    free(([1m[32mchar[m *)p->key);
  }
}

[1m[36m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *
make_key_values([1m[32mvoid[m) {
  [1m[32mconst[m [1m[32mchar[m *keys[] = {
    [1m[35m"twas"[m, [1m[35m"brillig"[m, [1m[35m"and"[m, [1m[35m"the"[m, [1m[35m"slithy"[m, [1m[35m"toves"[m,
    [1m[35m"did"[m, [1m[35m"gyre"[m, [1m[35m"and"[m, [1m[35m"gimble"[m, [1m[35m"in"[m, [1m[35m"the"[m, [1m[35m"wabe"[m,
    [1m[35m"all"[m, [1m[35m"mimsy"[m, [1m[35m"were"[m, [1m[35m"the"[m, [1m[35m"borogoves"[m,
    [1m[35m"and"[m, [1m[35m"the"[m, [1m[35m"mome"[m, [1m[35m"raths"[m, [1m[35m"outgrabe"[m,
  };
  [1m[32mstruct[m KeyValue *p = [1m[35mNULL[m;
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < [1m[33msizeof[m(keys)/[1m[33msizeof[m(keys[[1m[35m0[m]); i++) {
    p = add_key_value(p, keys[i], i);
  }
  [1m[33mreturn[m p;
}

[1m[36m/** Print out all the words in the first verse of Carroll's Jabberwocky
 *  paired with their index in the verse.[m[71;100H47,18[9CTop"bug-program.c" 79L, 2265C[47;18H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H[1m[36m */[m
[1m[32mint[m main() {
  [1m[32mstruct[m KeyValue *keyValues = make_key_values();[71;1H[K[71;100H47,18[9C33%[44;18H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;3H[1m[33mfor[m ([1m[32mstruct[m KeyValue *p = keyValues; p != [1m[35mNULL[m; p = p->succ) {
    printf([1m[35m"[m[1m[31m%s[m[1m[35m: [m[1m[31m%d\n[m[1m[35m"[m, p->key, p->value);
  }[71;100H[K[71;100H47,18[9C66%[41;18H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;3Hfree_key_values(keyValues);
  [1m[33mreturn[m [1m[35m0[m;
}[71;100H[K[71;100H47,18[9CBot[38;18H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H[1m[34m~                                                                                                                    [69;1H~                                                                                                                    [70;1H~                                                                                                                    [m[71;100H[K[71;100H47,18[9CBot[35;18H[?25h[?25l[1;70r[1;1H[3M[1;71r[68;1H[1m[34m~                                                                                                                    [69;1H~                                                                                                                    [70;1H~                                                                                                                    [m[71;100H[K[71;100H47,18[9CBot[32;18H[?25h[?25l[1;70r[1;1H[3L[1;71r[1;1H[1m[36m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.[m[71;100H[K[71;100H47,18[9CBot[35;18H[?25h[?25l[1;70r[1;1H[3L[1;71r[1;3H[1m[32mstruct[m KeyValue *succ; [1m[36m/** next key-value in chain */[m
};[71;100H[K[71;100H47,18[9CBot[38;18H[?25h[?25l[1;70r[1;1H[3L[1;71r[1;1H[1m[32mstruct[m KeyValue {
  [1m[32mconst[m [1m[32mchar[m *key;[7C[1m[36m/** string key */[m
  [1m[32mint[m value;[13C[1m[36m/** integer value */[m[71;100H[K[71;100H47,18[9C66%[41;18H[?25h[?25l[1;70r[1;1H[3L[1;71r[1;1H[1m[34m#include [m[1m[35m<string.h>[m

[1m[36m/** A struct used to form a linear chain of key-value pairs. */[m[71;100H[K[71;100H47,18[9C33%[44;18H[?25h[?25l[1;70r[1;1H[3L[1;71r[1;1H[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m[71;100H[K[71;100H47,18[9CTop[47;18H[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[27m[23m[29m[m[H[2J[?25l[1;3H[1m[36m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [1m[33mreturn[m kv;
}

[1m[36m/** Free all the key-value's in keyValues. */[m
[1m[32mstatic[m [1m[32mvoid[m
free_key_values([1m[32mstruct[m KeyValue *keyValues)
{
  [1m[36m//go thru chain of keyValues[m
  [1m[33mfor[m ([1m[32mstruct[m KeyValue *p = keyValues; p != [1m[35mNULL[m;) {
    p = keyValues;
    keyValues = keyValues->succ;
    free(p); [1m[36m//free KeyValue struct[m
    free(([1m[32mchar[m *)p->key);
  }
}

[1m[36m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *[24;63H47,18[9C55%[16;18H[?25h[?25l[1;23r[1;1H[3L[1;24r[1;3H}
  strcpy(s, k);  [1m[36m//copy string k into newly allocated memory pointed to by s[m[24;63H[K[24;63H46,18[9C50%[18;18H[?25h[27m[23m[29m[m[H[2J[?25l[2;3H[1m[36m//allocate storage for string pointed to by k[m
  [1m[32mchar[m *s = malloc(strlen(k));

  [1m[33mif[m (kv == [1m[35mNULL[m || s == [1m[35mNULL[m) { [1m[36m//check if allocations succeeded[m
    fprintf([1m[35mstderr[m, [1m[35m"malloc failure: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));
    exit([1m[35m1[m);
  }
  strcpy(s, k);  [1m[36m//copy string k into newly allocated memory pointed to by s

[m  [1m[36m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [1m[33mreturn[m kv;
}

[1m[36m/** Free all the key-value's in keyValues. */[m
[1m[32mstatic[m [1m[32mvoid[m
free_key_values([1m[32mstruct[m KeyValue *keyValues)
{
  [1m[36m//go thru chain of keyValues[m
  [1m[33mfor[m ([1m[32mstruct[m KeyValue *p = keyValues; p != [1m[35mNULL[m;) {
    p = keyValues;
    keyValues = keyValues->succ;
    free(p); [1m[36m//free KeyValue struct[m
    free(([1m[32mchar[m *)p->key);
  }
}

[1m[36m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *[34;100H46,18[9C45%[25;18H[?25h[?25l[1;33r[1;1H[3L[1;34r[1;1H{
  [1m[36m//allocate storage for new KeyValue struct[m
  [1m[32mstruct[m KeyValue *kv = malloc([1m[33msizeof[m([1m[32mstruct[m KeyValue *));[34;100H[K[34;100H46,18[9C39%[28;18H[?25h[?25l[1;33r[1;1H[3L[1;34r[1;1H[1m[36m */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *
add_key_value([1m[32mstruct[m KeyValue *keyValues, [1m[32mconst[m [1m[32mchar[m *k, [1m[32mint[m v)[34;100H[K[34;100H43,18[9C32%[28;18H[?25h[?25l[1;33r[1;1H[3L[1;34r[1;1H[1m[36m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.[m[34;100H[K[34;100H40,18[9C26%[28;18H[?25h[?25l[1;33r[1;1H[3L[1;34r[1;3H[1m[32mstruct[m KeyValue *succ; [1m[36m/** next key-value in chain */[m
};[34;100H[K[34;100H37,0-1[8C19%[28;1H[?25h[?25l[1;33r[1;1H[3M[1;34r[31;3H[1m[33mfor[m ([1m[32mstruct[m KeyValue *p = keyValues; p != [1m[35mNULL[m;) {
    p = keyValues;
    keyValues = keyValues->succ;[34;100H[K[34;100H37,0-1[8C26%[25;1H[?25h[?25l[1;33r[1;1H[3M[1;34r[31;5Hfree(p); [1m[36m//free KeyValue struct[m
    free(([1m[32mchar[m *)p->key);
  }[34;100H[K[34;100H37,0-1[8C32%[22;1H[?25h[?25l[1;33r[1;1H[3M[1;34r[31;1H}

[1m[36m/** Make key-values for all the words in the first verse of Carroll's[m[34;100H[K[34;100H37,0-1[8C39%[19;1H[?25h[?25l[1;33r[1;1H[3M[1;34r[31;1H[1m[36m *  Jabberwocky with value being the index of the word.
 */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *[34;100H[K[34;100H37,0-1[8C45%[16;1H[?25h[?25l[1;33r[1;1H[3M[1;34r[31;1Hmake_key_values([1m[32mvoid[m) {
  [1m[32mconst[m [1m[32mchar[m *keys[] = {
    [1m[35m"twas"[m, [1m[35m"brillig"[m, [1m[35m"and"[m, [1m[35m"the"[m, [1m[35m"slithy"[m, [1m[35m"toves"[m,[34;100H[K[34;100H37,0-1[8C52%[13;1H[?25h[?25l[1;33r[1;1H[3M[1;34r[31;5H[1m[35m"did"[m, [1m[35m"gyre"[m, [1m[35m"and"[m, [1m[35m"gimble"[m, [1m[35m"in"[m, [1m[35m"the"[m, [1m[35m"wabe"[m,
    [1m[35m"all"[m, [1m[35m"mimsy"[m, [1m[35m"were"[m, [1m[35m"the"[m, [1m[35m"borogoves"[m,
    [1m[35m"and"[m, [1m[35m"the"[m, [1m[35m"mome"[m, [1m[35m"raths"[m, [1m[35m"outgrabe"[m,[34;100H[K[34;100H37,0-1[8C58%[10;1H[?25h[?25l[1;33r[1;1H[3M[1;34r[31;3H};
  [1m[32mstruct[m KeyValue *p = [1m[35mNULL[m;
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < [1m[33msizeof[m(keys)/[1m[33msizeof[m(keys[[1m[35m0[m]); i++) {[34;100H[K[34;100H37,0-1[8C65%[7;1H[?25h[?25l[1;33r[1;1H[3M[1;34r[31;5Hp = add_key_value(p, keys[i], i);
  }
  [1m[33mreturn[m p;[34;100H[K[34;100H39,11[9C71%[6;11H[?25h[?25l[1;33r[1;1H[3M[1;34r[31;1H}

[1m[36m/** Print out all the words in the first verse of Carroll's Jabberwocky[m[34;100H[K[34;100H42,18[9C78%[6;18H[?25h[?25l[1;33r[1;1H[3M[1;34r[31;1H[1m[36m *  paired with their index in the verse.
 */[m
[1m[32mint[m main() {[34;100H[K[34;100H45,18[9C84%[6;18H[?25h[?25l[1;33r[1;1H[3M[1;34r[1;52H[46m{[6;3H}[m[31;3H[1m[32mstruct[m KeyValue *keyValues = make_key_values();
  [1m[33mfor[m ([1m[32mstruct[m KeyValue *p = keyValues; p != [1m[35mNULL[m; p = p->succ) {
    printf([1m[35m"[m[1m[31m%s[m[1m[35m: [m[1m[31m%d\n[m[1m[35m"[m, p->key, p->value);[34;100H[K[34;100H48,3[10C91%[6;3H[?25h[?25l[1;33r[1;1H[3M[1;34r[3;3H}[31;3H}
  free_key_values(keyValues);
  [1m[33mreturn[m [1m[35m0[m;[34;100H[K[34;100H51,18[9C97%[6;18H[?25h[?25l[1;33r[1;1H[3M[1;34r[31;1H}
[1m[34m~                                                                                                                    [33;1H~                                                                                                                    [m[34;100H[K[34;100H54,18[9CBot[6;18H[?25h[?25l[1;33r[1;1H[3L[1;34r[1;5Hfree(p); [1m[36m//free KeyValue struct[m
    free(([1m[32mchar[m *)p->key);
  }[34;100H[K[34;100H54,18[9C97%[9;18H[?25h[?25l[1;33r[1;1H[3L[1;34r[1;3H[1m[33mfor[m ([1m[32mstruct[m KeyValue *p = keyValues; p != [1m[35mNULL[m;) {
    p = keyValues;
    keyValues = keyValues->succ;[34;100H[K[34;100H54,18[9C91%[12;18H[?25h[?25l[1;33r[1;1H[3L[1;34r[1;1Hfree_key_values([1m[32mstruct[m KeyValue *keyValues)
{
  [1m[36m//go thru chain of keyValues[m[34;100H[K[34;100H54,18[9C84%[15;18H[?25h[?25l[1;33r[1;1H[3L[1;34r[2;1H[1m[36m/** Free all the key-value's in keyValues. */[m
[1m[32mstatic[m [1m[32mvoid[m[34;100H[K[34;100H54,18[9C78%[18;18H[?25h[?25l[1;33r[1;1H[3L[1;34r[2;3H[1m[33mreturn[m kv;
}[34;100H[K[34;100H54,18[9C71%[21;18H[?25h[?25l[1;33r[1;1H[3L[1;34r[2;3H[1m[36m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;[34;100H[K[34;100H54,18[9C65%[24;18H[?25h[?25l[1;33r[1;1H[3L[1;34r[1;5Hexit([1m[35m1[m);
  }
  strcpy(s, k);  [1m[36m//copy string k into newly allocated memory pointed to by s[m[34;100H[K[34;100H54,18[9C58%[27;18H[?25h[?25l[1;33r[1;1H[3L[1;34r[2;3H[1m[33mif[m (kv == [1m[35mNULL[m || s == [1m[35mNULL[m) { [1m[36m//check if allocations succeeded[m
    fprintf([1m[35mstderr[m, [1m[35m"malloc failure: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));[34;100H[K[34;100H52,18[9C52%[28;18H[?25h[?25l[1;33r[1;1H[3M[1;34r[31;5H[1m[35m"did"[m, [1m[35m"gyre"[m, [1m[35m"and"[m, [1m[35m"gimble"[m, [1m[35m"in"[m, [1m[35m"the"[m, [1m[35m"wabe"[m,
    [1m[35m"all"[m, [1m[35m"mimsy"[m, [1m[35m"were"[m, [1m[35m"the"[m, [1m[35m"borogoves"[m,
    [1m[35m"and"[m, [1m[35m"the"[m, [1m[35m"mome"[m, [1m[35m"raths"[m, [1m[35m"outgrabe"[m,[34;100H[K[34;100H52,18[9C58%[25;18H[?25h[?25l[1;33r[1;1H[3M[1;34r[31;3H};
  [1m[32mstruct[m KeyValue *p = [1m[35mNULL[m;
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < [1m[33msizeof[m(keys)/[1m[33msizeof[m(keys[[1m[35m0[m]); i++) {[34;100H[K[34;100H52,18[9C65%[22;18H[?25h[?25l[1;33r[1;1H[3M[1;34r[31;5Hp = add_key_value(p, keys[i], i);
  }
  [1m[33mreturn[m p;[34;100H[K[34;100H52,18[9C71%[19;18H[?25h[?25l[1;33r[1;1H[3M[1;34r[31;1H}

[1m[36m/** Print out all the words in the first verse of Carroll's Jabberwocky[m[34;100H[K[34;100H52,18[9C78%[16;18H[?25h[?25l[1;33r[1;1H[3M[1;34r[31;1H[1m[36m *  paired with their index in the verse.
 */[m
[1m[32mint[m main() {[34;100H[K[34;100H52,18[9C84%[13;18H[?25h[?25l[1;33r[1;1H[3M[1;34r[31;3H[1m[32mstruct[m KeyValue *keyValues = make_key_values();
  [1m[33mfor[m ([1m[32mstruct[m KeyValue *p = keyValues; p != [1m[35mNULL[m; p = p->succ) {
    printf([1m[35m"[m[1m[31m%s[m[1m[35m: [m[1m[31m%d\n[m[1m[35m"[m, p->key, p->value);[34;100H[K[34;100H52,18[9C91%[10;18H[?25h[?25l[1;33r[1;1H[3M[1;34r[31;3H}
  free_key_values(keyValues);
  [1m[33mreturn[m [1m[35m0[m;[34;100H[K[34;100H52,18[9C97%[7;18H[?25h[?25l[1;33r[1;1H[3L[1;34r[1;3H[1m[33mfor[m ([1m[32mstruct[m KeyValue *p = keyValues; p != [1m[35mNULL[m;) {
    p = keyValues;
    keyValues = keyValues->succ;[34;100H[K[34;100H52,18[9C91%[10;18H[?25h[?25l[1;33r[1;1H[3L[1;34r[1;1Hfree_key_values([1m[32mstruct[m KeyValue *keyValues)
{
  [1m[36m//go thru chain of keyValues[m[34;100H[K[34;100H52,18[9C84%[13;18H[?25h[?25l[1;33r[1;1H[3L[1;34r[2;1H[1m[36m/** Free all the key-value's in keyValues. */[m
[1m[32mstatic[m [1m[32mvoid[m[34;100H[K[34;100H52,18[9C78%[16;18H[?25h[?25l[1;33r[1;1H[3L[1;34r[2;3H[1m[33mreturn[m kv;
}[34;100H[K[34;100H52,18[9C71%[19;18H[?25h[?25l[1;33r[1;1H[3L[1;34r[2;3H[1m[36m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;[34;100H[K[34;100H52,18[9C65%[22;18H[?25h[?25l[1;33r[1;1H[3L[1;34r[1;5Hexit([1m[35m1[m);
  }
  strcpy(s, k);  [1m[36m//copy string k into newly allocated memory pointed to by s[m[34;100H[K[34;100H52,18[9C58%[25;18H[?25h[?25l[1;33r[1;1H[3L[1;34r[2;3H[1m[33mif[m (kv == [1m[35mNULL[m || s == [1m[35mNULL[m) { [1m[36m//check if allocations succeeded[m
    fprintf([1m[35mstderr[m, [1m[35m"malloc failure: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));[34;100H[K[34;100H52,18[9C52%[28;18H[?25h[?25l[1;33r[1;1H[3L[1;34r[2;3H[1m[36m//allocate storage for string pointed to by k[m
  [1m[32mchar[m *s = malloc(strlen(k));[20;1H[46m{[28;1H}[m[34;100H[K[34;100H49,1[10C45%[28;1H[?25h[?25l[1;33r[1;1H[3L[1;34r[1;1H{
  [1m[36m//allocate storage for new KeyValue struct[m
  [1m[32mstruct[m KeyValue *kv = malloc([1m[33msizeof[m([1m[32mstruct[m KeyValue *));[23;1H{[31;1H}[34;100H[K[34;100H46,18[9C39%[28;18H[?25h[?25l[1;33r[1;1H[3L[1;34r[1;1H[1m[36m */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *
add_key_value([1m[32mstruct[m KeyValue *keyValues, [1m[32mconst[m [1m[32mchar[m *k, [1m[32mint[m v)[34;100H[K[34;100H43,18[9C32%[28;18H[?25h[?25l[1;33r[1;1H[3L[1;34r[1;1H[1m[36m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.[m[34;100H[K[34;100H40,18[9C26%[28;18H[?25h[?25l[1;33r[1;1H[3L[1;34r[1;3H[1m[32mstruct[m KeyValue *succ; [1m[36m/** next key-value in chain */[m
};[34;100H[K[34;100H37,0-1[8C19%[28;1H[?25h[?25l[1;33r[1;1H[3L[1;34r[1;1H[1m[32mstruct[m KeyValue {
  [1m[32mconst[m [1m[32mchar[m *key;[7C[1m[36m/** string key */[m
  [1m[32mint[m value;[13C[1m[36m/** integer value */[m[34;100H[K[34;100H34,0-1[8C13%[28;1H[?25h[?25l[1;33r[1;1H[3L[1;34r[1;1H[1m[34m#include [m[1m[35m<string.h>[m

[1m[36m/** A struct used to form a linear chain of key-value pairs. */[m[34;100H[K[34;100H31,0-1[9C6%[28;1H[?25h[?25l[1;33r[1;1H[3L[1;34r[1;1H[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m[34;100H[K[34;100H28,12[9CTop[28;12H[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[34;101H1,55[21;55H[?25h[?25l[21;38H[46m([17C)[m[34;104H6[21;56H[?25h[?25l[34;90H~@k[21;56H[34;90H   [21;55H[21;38H([17C)[34;104H5[21;55H[?25h[?25l[34;90H~@k[21;55H[34;90H   [21;56H[21;38H[46m([17C)[m[34;104H6[21;56H[?25h[?25l[34;90Hi[21;56H[34;90H [21;56H[34;1H[1m-- INSERT --[m[34;100H[K[34;100H21,56[9CTop[21;56H[?25h[?25l)[1C;[21;58H[K[21;55H[46m)[m)[34;104H5[21;55H[?25h[?25l)[1C;[21;57H[K[21;54H[46m)[m)[34;104H4[21;54H[?25h[34;1H[K[21;53H[?25l[34;90H^[[21;53H[34;90H  [21;54H[21;38H([15C)[34;100H21,53[9CTop[21;53H[?25h[?25l[34;90H:[21;53H[34;90H[K[34;1H:[?2004h[?25hw[?25l[?25hq[?25l[?25h[?25l[?1006l[?1002l[?2004l"bug-program.c" 79L, 2263C written[23;2t[23;1t[22;2t[22;1t[23;2t[23;1t
[?2004l[?1l>[?25h[?1049l[23;0;0trgeary1@remote00:~/i220a/submit/lab10/exercises/bug-program$ a[Kvim bug-program.c[Kvim bug-program.cvalgrind c[K
[?1000h[?2004h[?1049h[22;0;0t[?1h=[?2004h[1;34r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[34;1H"bug-program.c" 79L, 2263C[2;1Hâ–½[6n[2;1H  [1;1H[>c]10;?]11;?[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([33msizeof[m([32mstruct[m KeyValue));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k));

  [33mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;[34;100H21,53[9CTop[21;53H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[27m[23m[29m[m[H[2J[?25l[1;1H[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m
[1m[34m#include [m[1m[35m<string.h>[m

[1m[36m/** A struct used to form a linear chain of key-value pairs. */[m
[1m[32mstruct[m KeyValue {
  [1m[32mconst[m [1m[32mchar[m *key;[7C[1m[36m/** string key */[m
  [1m[32mint[m value;[13C[1m[36m/** integer value */[m
  [1m[32mstruct[m KeyValue *succ; [1m[36m/** next key-value in chain */[m
};

[1m[36m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *
add_key_value([1m[32mstruct[m KeyValue *keyValues, [1m[32mconst[m [1m[32mchar[m *k, [1m[32mint[m v)
{
  [1m[36m//allocate storage for new KeyValue struct[m
  [1m[32mstruct[m KeyValue *kv = malloc([1m[33msizeof[m([1m[32mstruct[m KeyValue));

  [1m[36m//allocate storage for string pointed to by k[m
  [1m[32mchar[m *s = malloc(strlen(k));

  [1m[33mif[m (kv == [1m[35mNULL[m || s == [1m[35mNULL[m) { [1m[36m//check if allocations succeeded[m
    fprintf([1m[35mstderr[m, [1m[35m"malloc failure: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));
    exit([1m[35m1[m);
  }
  strcpy(s, k);  [1m[36m//copy string k into newly allocated memory pointed to by s

[m  [1m[36m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;[34;100H21,53[9CTop"bug-program.c" 79L, 2263C[21;53H[?25h[?25l[1;33r[1;1H[3M[1;34r[32;3H[1m[33mreturn[m kv;
}[34;1H[K[34;100H21,53[10C6%[18;53H[?25h[?25l[1;33r[1;1H[3M[1;34r[32;1H[1m[36m/** Free all the key-value's in keyValues. */[m
[1m[32mstatic[m [1m[32mvoid[m[34;100H[K[34;100H21,53[9C13%[15;53H[?25h[?25l[34;100H18,32[12;32H[?25h[?25l[34;90H^[[12;32H[34;90H  [12;32H[34;90H^[[12;32H[34;90H  [12;32H[?25h[?25l[34;90H:[12;32H[34;90H[K[34;1H:[?2004h[?25hw[?25l[?25hq[?25l[?25h[?25l[?1006l[?1002l[?2004l"bug-program.c" 79L, 2263C written[23;2t[23;1t[22;2t[22;1t[23;2t[23;1t
[?2004l[?1l>[?25h[?1049l[23;0;0trgeary1@remote00:~/i220a/submit/lab10/exercises/bug-program$ mak[K[K[Kvim bug-program.c
[?1000h[?2004h[?1049h[22;0;0t[?1h=[?2004h[1;34r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[34;1H"bug-program.c" 79L, 2263C[2;1Hâ–½[6n[2;1H  [1;1H[>c]10;?]11;?[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([33msizeof[m([32mstruct[m KeyValue));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k));

  [33mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;[34;100H18,32[9CTop[18;32H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[27m[23m[29m[m[H[2J[?25l[1;1H[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m
[1m[34m#include [m[1m[35m<string.h>[m

[1m[36m/** A struct used to form a linear chain of key-value pairs. */[m
[1m[32mstruct[m KeyValue {
  [1m[32mconst[m [1m[32mchar[m *key;[7C[1m[36m/** string key */[m
  [1m[32mint[m value;[13C[1m[36m/** integer value */[m
  [1m[32mstruct[m KeyValue *succ; [1m[36m/** next key-value in chain */[m
};

[1m[36m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *
add_key_value([1m[32mstruct[m KeyValue *keyValues, [1m[32mconst[m [1m[32mchar[m *k, [1m[32mint[m v)
{
  [1m[36m//allocate storage for new KeyValue struct[m
  [1m[32mstruct[m KeyValue *kv = malloc([1m[33msizeof[m([1m[32mstruct[m KeyValue));

  [1m[36m//allocate storage for string pointed to by k[m
  [1m[32mchar[m *s = malloc(strlen(k));

  [1m[33mif[m (kv == [1m[35mNULL[m || s == [1m[35mNULL[m) { [1m[36m//check if allocations succeeded[m
    fprintf([1m[35mstderr[m, [1m[35m"malloc failure: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));
    exit([1m[35m1[m);
  }
  strcpy(s, k);  [1m[36m//copy string k into newly allocated memory pointed to by s

[m  [1m[36m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;[34;100H18,32[9CTop"bug-program.c" 79L, 2263C[18;32H[?25h[?25l[1;33r[1;1H[3M[1;34r[32;3H[1m[33mreturn[m kv;
}[34;1H[K[34;100H18,32[10C6%[15;32H[?25h[?25l[21;26H[46m([mk[46m)[m[34;100H24,28[21;28H[?25h[?25l[34;90Hi[21;28H[34;90H [21;28H[34;1H[1m-- INSERT --[m[34;100H[K[34;100H24,28[10C6%[21;28H[?25h[?25l[46m+[m));+[46m)[m[34;104H9[21;29H[?25h[?25l[1m[35m[46m1[m));[1m[35m1[m[46m)[m[34;103H30[21;30H[?25h[?25l)[46m)[m;[21;32H[K[21;29H[46m)[m)[34;103H29[21;29H[?25h[?25l)[1C;[21;31H[K[21;28H[46m)[m)[34;104H8[21;28H[?25h[?25l[21;19H[46m([mstrlen(k)[46m)[m[34;104H9[21;29H[?25h[?25l[46m+[m);+[46m)[m[34;103H30[21;30H[?25h[?25l[1m[35m[46m1[m);[1m[35m1[m[46m)[m[34;104H1[21;31H[?25h[?25l[46m:[m);:[46m)[m[34;104H2[21;32H[?25h[?25l)[46m;[m[21;33H[K[21;31H[46m)[m;[34;104H1[21;31H[?25h[34;1H[K[21;30H[?25l[34;90H^[[21;30H[34;90H  [21;31H[21;19H([11C)[34;100H24,30[10C6%[21;30H[?25h[?25l[34;90H:[21;30H[34;90H[K[34;1H:[?2004h[?25hw[?25l[?25hq[?25l[?25h[?25l[?1006l[?1002l[?2004l"bug-program.c" 79L, 2265C written[23;2t[23;1t[22;2t[22;1t[23;2t[23;1t
[?2004l[?1l>[?25h[?1049l[23;0;0trgeary1@remote00:~/i220a/submit/lab10/exercises/bug-program$ ma[K[Kvim bug-program.cvalgrind algrind -v --leak-check=yes ./bug-program 2>bug-program.valgrind
outgrabe: 22
raths: 21
mome: 20
the: 19
and: 18
borogoves: 17
the: 16
were: 15
mimsy: 14
all: 13
wabe: 12
the: 11
in: 10
gimble: 9
and: 8
gyre: 7
did: 6
toves: 5
slithy: 4
the: 3
and: 2
brillig: 1
twas: 0
Segmentation fault
rgeary1@remote00:~/i220a/submit/lab10/exercises/bug-program$ valgrind -v --leak-check=yes ./bug-program 2>bug-program.valgrind[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cim bug-program.c[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
[?1000h[?2004h[?1049h[22;0;0t[?1h=[?2004h[1;34r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[34;1H"bug-program.c" 79L, 2265C[2;1Hâ–½[6n[2;1H  [1;1H[>c]10;?]11;?[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([33msizeof[m([32mstruct[m KeyValue));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k)+[31m1[m);

  [33mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;[34;100H24,30[9CTop[24;30H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[27m[23m[29m[m[H[2J[?25l[1;1H[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m
[1m[34m#include [m[1m[35m<string.h>[m

[1m[36m/** A struct used to form a linear chain of key-value pairs. */[m
[1m[32mstruct[m KeyValue {
  [1m[32mconst[m [1m[32mchar[m *key;[7C[1m[36m/** string key */[m
  [1m[32mint[m value;[13C[1m[36m/** integer value */[m
  [1m[32mstruct[m KeyValue *succ; [1m[36m/** next key-value in chain */[m
};

[1m[36m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *
add_key_value([1m[32mstruct[m KeyValue *keyValues, [1m[32mconst[m [1m[32mchar[m *k, [1m[32mint[m v)
{
  [1m[36m//allocate storage for new KeyValue struct[m
  [1m[32mstruct[m KeyValue *kv = malloc([1m[33msizeof[m([1m[32mstruct[m KeyValue));

  [1m[36m//allocate storage for string pointed to by k[m
  [1m[32mchar[m *s = malloc(strlen(k)+[1m[35m1[m);

  [1m[33mif[m (kv == [1m[35mNULL[m || s == [1m[35mNULL[m) { [1m[36m//check if allocations succeeded[m
    fprintf([1m[35mstderr[m, [1m[35m"malloc failure: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));
    exit([1m[35m1[m);
  }
  strcpy(s, k);  [1m[36m//copy string k into newly allocated memory pointed to by s

[m  [1m[36m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;[34;100H24,30[9CTop"bug-program.c" 79L, 2265C[24;30H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m
[1m[34m#include [m[1m[35m<string.h>[m

[1m[36m/** A struct used to form a linear chain of key-value pairs. */[m
[1m[32mstruct[m KeyValue {
  [1m[32mconst[m [1m[32mchar[m *key;[7C[1m[36m/** string key */[m
  [1m[32mint[m value;[13C[1m[36m/** integer value */[m
  [1m[32mstruct[m KeyValue *succ; [1m[36m/** next key-value in chain */[m
};

[1m[36m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *
add_key_value([1m[32mstruct[m KeyValue *keyValues, [1m[32mconst[m [1m[32mchar[m *k, [1m[32mint[m v)
{
  [1m[36m//allocate storage for new KeyValue struct[m
  [1m[32mstruct[m KeyValue *kv = malloc([1m[33msizeof[m([1m[32mstruct[m KeyValue));

  [1m[36m//allocate storage for string pointed to by k[m
  [1m[32mchar[m *s = malloc(strlen(k)+[1m[35m1[m);

  [1m[33mif[m (kv == [1m[35mNULL[m || s == [1m[35mNULL[m) { [1m[36m//check if allocations succeeded[m
    fprintf([1m[35mstderr[m, [1m[35m"malloc failure: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));
    exit([1m[35m1[m);
  }
  strcpy(s, k);  [1m[36m//copy string k into newly allocated memory pointed to by s

[m  [1m[36m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [1m[33mreturn[m kv;
}

[1m[36m/** Free all the key-value's in keyValues. */[m
[1m[32mstatic[m [1m[32mvoid[m
free_key_values([1m[32mstruct[m KeyValue *keyValues)
{
  [1m[36m//go thru chain of keyValues[m
  [1m[33mfor[m ([1m[32mstruct[m KeyValue *p = keyValues; p != [1m[35mNULL[m;) {
    p = keyValues;
    keyValues = keyValues->succ;
    free(p); [1m[36m//free KeyValue struct[m
    free(([1m[32mchar[m *)p->key);
  }
}

[1m[36m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *
make_key_values([1m[32mvoid[m) {
  [1m[32mconst[m [1m[32mchar[m *keys[] = {
    [1m[35m"twas"[m, [1m[35m"brillig"[m, [1m[35m"and"[m, [1m[35m"the"[m, [1m[35m"slithy"[m, [1m[35m"toves"[m,
    [1m[35m"did"[m, [1m[35m"gyre"[m, [1m[35m"and"[m, [1m[35m"gimble"[m, [1m[35m"in"[m, [1m[35m"the"[m, [1m[35m"wabe"[m,
    [1m[35m"all"[m, [1m[35m"mimsy"[m, [1m[35m"were"[m, [1m[35m"the"[m, [1m[35m"borogoves"[m,
    [1m[35m"and"[m, [1m[35m"the"[m, [1m[35m"mome"[m, [1m[35m"raths"[m, [1m[35m"outgrabe"[m,
  };
  [1m[32mstruct[m KeyValue *p = [1m[35mNULL[m;
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < [1m[33msizeof[m(keys)/[1m[33msizeof[m(keys[[1m[35m0[m]); i++) {
    p = add_key_value(p, keys[i], i);
  }
  [1m[33mreturn[m p;
}

[1m[36m/** Print out all the words in the first verse of Carroll's Jabberwocky
 *  paired with their index in the verse.
 */[m[72;254H24,30[9CTop[24;30H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m
[1m[34m#include [m[1m[35m<string.h>[m

[1m[36m/** A struct used to form a linear chain of key-value pairs. */[m
[1m[32mstruct[m KeyValue {
  [1m[32mconst[m [1m[32mchar[m *key;[7C[1m[36m/** string key */[m
  [1m[32mint[m value;[13C[1m[36m/** integer value */[m
  [1m[32mstruct[m KeyValue *succ; [1m[36m/** next key-value in chain */[m
};

[1m[36m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *
add_key_value([1m[32mstruct[m KeyValue *keyValues, [1m[32mconst[m [1m[32mchar[m *k, [1m[32mint[m v)
{
  [1m[36m//allocate storage for new KeyValue struct[m
  [1m[32mstruct[m KeyValue *kv = malloc([1m[33msizeof[m([1m[32mstruct[m KeyValue));

  [1m[36m//allocate storage for string pointed to by k[m
  [1m[32mchar[m *s = malloc(strlen(k)+[1m[35m1[m);

  [1m[33mif[m (kv == [1m[35mNULL[m || s == [1m[35mNULL[m) { [1m[36m//check if allocations succeeded[m
    fprintf([1m[35mstderr[m, [1m[35m"malloc failure: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));
    exit([1m[35m1[m);
  }
  strcpy(s, k);  [1m[36m//copy string k into newly allocated memory pointed to by s

[m  [1m[36m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [1m[33mreturn[m kv;
}

[1m[36m/** Free all the key-value's in keyValues. */[m
[1m[32mstatic[m [1m[32mvoid[m
free_key_values([1m[32mstruct[m KeyValue *keyValues)
{
  [1m[36m//go thru chain of keyValues[m
  [1m[33mfor[m ([1m[32mstruct[m KeyValue *p = keyValues; p != [1m[35mNULL[m;) {
    p = keyValues;
    keyValues = keyValues->succ;
    free(p); [1m[36m//free KeyValue struct[m
    free(([1m[32mchar[m *)p->key);
  }
}

[1m[36m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *
make_key_values([1m[32mvoid[m) {
  [1m[32mconst[m [1m[32mchar[m *keys[] = {
    [1m[35m"twas"[m, [1m[35m"brillig"[m, [1m[35m"and"[m, [1m[35m"the"[m, [1m[35m"slithy"[m, [1m[35m"toves"[m,
    [1m[35m"did"[m, [1m[35m"gyre"[m, [1m[35m"and"[m, [1m[35m"gimble"[m, [1m[35m"in"[m, [1m[35m"the"[m, [1m[35m"wabe"[m,
    [1m[35m"all"[m, [1m[35m"mimsy"[m, [1m[35m"were"[m, [1m[35m"the"[m, [1m[35m"borogoves"[m,
    [1m[35m"and"[m, [1m[35m"the"[m, [1m[35m"mome"[m, [1m[35m"raths"[m, [1m[35m"outgrabe"[m,
  };
  [1m[32mstruct[m KeyValue *p = [1m[35mNULL[m;
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < [1m[33msizeof[m(keys)/[1m[33msizeof[m(keys[[1m[35m0[m]); i++) {
    p = add_key_value(p, keys[i], i);
  }
  [1m[33mreturn[m p;
}

[1m[36m/** Print out all the words in the first verse of Carroll's Jabberwocky
 *  paired with their index in the verse.[m[71;100H24,30[9CTop[24;30H[?25h[?25l[71;100H44,18[44;18H[?25h[?25l[71;101H2,30[42;30H[?25h[?25l[71;90Hi[42;30H[71;90H [42;30H[71;1H[1m-- INSERT --[m[71;100H[K[71;100H42,30[9CTop[42;30H[?25h[?25l[71;104H1[42;31H[?25h[?25l[43;70r[43;1H[L[1;71r[43;3H[1m[36m//[m[71;100H[K[71;100H43,5[10CTop[43;5H[?25h[?25l/[43;4H[K[71;103H4[43;4H[?25h[?25l[43;3H[K[71;103H3[43;3H[?25h[?25ls[71;103H4[43;4H[?25h[?25lt[71;103H5[43;5H[?25h[?25lr[71;103H6[43;6H[?25h[?25lu[71;103H7[43;7H[?25h[?25lc[71;103H8[43;8H[?25h[?25l  [1m[32mstruct[m[71;103H9[43;9H[?25h[?25l[71;103H10[43;10H[?25h[?25lK[71;104H1[43;11H[?25h[?25le[71;104H2[43;12H[?25h[?25ly[71;104H3[43;13H[?25h[?25lv[71;104H4[43;14H[?25h[?25l[43;13H[K[71;104H3[43;13H[?25h[?25lV[71;104H4[43;14H[?25h[?25la[71;104H5[43;15H[?25h[?25ll[71;104H6[43;16H[?25h[?25lu[71;104H7[43;17H[?25h[?25le[71;104H8[43;18H[?25h[?25l[71;104H9[43;19H[?25h[?25l*[71;103H20[43;20H[?25h[?25lp[71;104H1[43;21H[?25h[?25l[71;101H4,40[44;40H[?25h[?25lp != [1m[35mNULL[m;) {[44;52H[K[71;103H39[44;39H[?25h[?25lp != [1m[35mNULL[m;) {[44;51H[K[71;104H8[44;38H[?25h[?25lp != [1m[35mNULL[m;) {[44;50H[K[71;104H7[44;37H[?25h[?25lp != [1m[35mNULL[m;) {[44;49H[K[71;104H6[44;36H[?25h[?25lp != [1m[35mNULL[m;) {[44;48H[K[71;104H5[44;35H[?25h[?25lp != [1m[35mNULL[m;) {[44;47H[K[71;104H4[44;34H[?25h[?25lp != [1m[35mNULL[m;) {[44;46H[K[71;104H3[44;33H[?25h[?25lp != [1m[35mNULL[m;) {[44;45H[K[71;104H2[44;32H[?25h[?25lp != [1m[35mNULL[m;) {[44;44H[K[71;104H1[44;31H[?25h[?25lp != [1m[35mNULL[m;) {[44;43H[K[71;104H0[44;30H[?25h[?25lp != [1m[35mNULL[m;) {[44;42H[K[71;103H29[44;29H[?25h[?25lp != [1m[35mNULL[m;) {[44;41H[K[71;104H8[44;28H[?25h[?25lp != [1m[35mNULL[m;) {[44;40H[K[71;104H7[44;27H[?25h[?25lp != [1m[35mNULL[m;) {[44;39H[K[71;104H6[44;26H[?25h[?25l != [1m[35mNULL[m;) {[44;38H[K[71;104H5[44;25H[?25h[?25lp != [1m[35mNULL[m;) {[44;37H[K[71;104H4[44;24H[?25h[?25lp != [1m[35mNULL[m;) {[44;36H[K[71;104H3[44;23H[?25h[?25lp != [1m[35mNULL[m;) {[44;35H[K[71;104H2[44;22H[?25h[?25lp != [1m[35mNULL[m;) {[44;34H[K[71;104H1[44;21H[?25h[?25lp != [1m[35mNULL[m;) {[44;33H[K[71;104H0[44;20H[?25h[?25lp != [1m[35mNULL[m;) {[44;32H[K[71;103H19[44;19H[?25h[?25lp != [1m[35mNULL[m;) {[44;31H[K[71;104H8[44;18H[?25h[?25lp != [1m[35mNULL[m;) {[44;30H[K[71;104H7[44;17H[?25h[?25lp != [1m[35mNULL[m;) {[44;29H[K[71;104H6[44;16H[?25h[?25lp != [1m[35mNULL[m;) {[44;28H[K[71;104H5[44;15H[?25h[?25l[44;8Hstructp != [1m[35mNULL[m;) {[44;27H[K[71;104H4[44;14H[?25h[?25lp != [1m[35mNULL[m;) {[44;26H[K[71;104H3[44;13H[?25h[?25lp != [1m[35mNULL[m;) {[44;25H[K[71;104H2[44;12H[?25h[?25lp != [1m[35mNULL[m;) {[44;24H[K[71;104H1[44;11H[?25h[?25lp != [1m[35mNULL[m;) {[44;23H[K[71;104H0[44;10H[?25h[?25lp != [1m[35mNULL[m;) {[44;22H[K[71;103H9 [44;9H[?25h[?25lp != [1m[35mNULL[m;) {[44;21H[K[44;7H[46m([10C)[m[71;103H8[44;8H[?25h[?25l([10C)[71;101H3,21[43;21H[?25h[?25l;[71;104H2[43;22H[?25h[?25l[71;103H5 [43;5H[?25h[?25l[71;4H[1m(insert)- VISUAL --[m[71;100H[K[71;90H2[44;6H[71;100H44,6[10CTop[44;6H[43;5H[1m[7m[32mruct[m[7m KeyValue *p; 
  [m[1m[7m[33mfor[m [?25h[?25l[?25h[?25l[71;90H [44;6H[71;4H[1mINSERTt --[m[71;13H[K[71;100H44,6[10CTop[43;5H[1m[32mruct[m KeyValue *p;[43;22H[K[44;1H  [1m[33mfor[m [?25h[?25lfo (p != [1m[35mNULL[m;) {[44;20H[K[71;103H5[44;5H[?25h[?25l (p != [1m[35mNULL[m;) {[44;19H[K[71;103H4[44;4H[?25h[?25l (p != [1m[35mNULL[m;) {[44;18H[K[71;103H3[44;3H[?25h[?25lw (p != [1m[35mNULL[m;) {[71;103H4[44;4H[?25h[?25lh (p != [1m[35mNULL[m;) {[71;103H5[44;5H[?25h[?25li (p != [1m[35mNULL[m;) {[71;103H6[44;6H[?25h[?25ll (p != [1m[35mNULL[m;) {[71;103H7[44;7H[?25h[?25l  [1m[33mwhile[m (p != [1m[35mNULL[m;) {[71;103H8[44;8H[?25h[71;1H[K[44;7H[?25l[71;90H^[[44;7H[71;90H  [44;8H[71;100H44,7[10CTop[44;7H[?25h[?25l[71;101H6,32[46;32H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H[1m[34m#include [m[1m[35m<string.h>[m

[1m[36m/** A struct used to form a linear chain of key-value pairs. */[m
[1m[32mstruct[m KeyValue {
  [1m[32mconst[m [1m[32mchar[m *key;[7C[1m[36m/** string key */[m
  [1m[32mint[m value;[13C[1m[36m/** integer value */[m
  [1m[32mstruct[m KeyValue *succ; [1m[36m/** next key-value in chain */[m
};

[1m[36m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *
add_key_value([1m[32mstruct[m KeyValue *keyValues, [1m[32mconst[m [1m[32mchar[m *k, [1m[32mint[m v)
{
  [1m[36m//allocate storage for new KeyValue struct[m
  [1m[32mstruct[m KeyValue *kv = malloc([1m[33msizeof[m([1m[32mstruct[m KeyValue));

  [1m[36m//allocate storage for string pointed to by k[m
  [1m[32mchar[m *s = malloc(strlen(k)+[1m[35m1[m);

  [1m[33mif[m (kv == [1m[35mNULL[m || s == [1m[35mNULL[m) { [1m[36m//check if allocations succeeded[m
    fprintf([1m[35mstderr[m, [1m[35m"malloc failure: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));
    exit([1m[35m1[m);
  }
  strcpy(s, k);  [1m[36m//copy string k into newly allocated memory pointed to by s

[m  [1m[36m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [1m[33mreturn[m kv;
}

[1m[36m/** Free all the key-value's in keyValues. */[m
[1m[32mstatic[m [1m[32mvoid[m
free_key_values([1m[32mstruct[m KeyValue *keyValues)
{
  [1m[36m//go thru chain of keyValues[m
  [1m[32mstruct[m KeyValue *p;
  [1m[33mwhile[m (p != [1m[35mNULL[m;) {
    p = keyValues;
    keyValues = keyValues->succ;
    free(p); [1m[36m//free KeyValue struct[m
    free(([1m[32mchar[m *)p->key);
  }
}

[1m[36m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *
make_key_values([1m[32mvoid[m) {
  [1m[32mconst[m [1m[32mchar[m *keys[] = {
    [1m[35m"twas"[m, [1m[35m"brillig"[m, [1m[35m"and"[m, [1m[35m"the"[m, [1m[35m"slithy"[m, [1m[35m"toves"[m,
    [1m[35m"did"[m, [1m[35m"gyre"[m, [1m[35m"and"[m, [1m[35m"gimble"[m, [1m[35m"in"[m, [1m[35m"the"[m, [1m[35m"wabe"[m,
    [1m[35m"all"[m, [1m[35m"mimsy"[m, [1m[35m"were"[m, [1m[35m"the"[m, [1m[35m"borogoves"[m,
    [1m[35m"and"[m, [1m[35m"the"[m, [1m[35m"mome"[m, [1m[35m"raths"[m, [1m[35m"outgrabe"[m,
  };
  [1m[32mstruct[m KeyValue *p = [1m[35mNULL[m;
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < [1m[33msizeof[m(keys)/[1m[33msizeof[m(keys[[1m[35m0[m]); i++) {
    p = add_key_value(p, keys[i], i);
  }
  [1m[33mreturn[m p;
}[67;85H46,32[9C21%[43;32H[?25h[27m[23m[29m[m[H[2J[?25l[1;3H[1m[32mint[m value;[13C[1m[36m/** integer value */[m
  [1m[32mstruct[m KeyValue *succ; [1m[36m/** next key-value in chain */[m
};

[1m[36m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *
add_key_value([1m[32mstruct[m KeyValue *keyValues, [1m[32mconst[m [1m[32mchar[m *k, [1m[32mint[m v)
{
  [1m[36m//allocate storage for new KeyValue struct[m
  [1m[32mstruct[m KeyValue *kv = malloc([1m[33msizeof[m([1m[32mstruct[m KeyValue));

  [1m[36m//allocate storage for string pointed to by k[m
  [1m[32mchar[m *s = malloc(strlen(k)+[1m[35m1[m);

  [1m[33mif[m (kv == [1m[35mNULL[m || s == [1m[35mNULL[m) { [1m[36m//check if allocations succeeded[m
    fprintf([1m[35mstderr[m, [1m[35m"malloc failure: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));
    exit([1m[35m1[m);
  }
  strcpy(s, k);  [1m[36m//copy string k into newly allocated memory pointed to by s

[m  [1m[36m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [1m[33mreturn[m kv;
}

[1m[36m/** Free all the key-value's in keyValues. */[m
[1m[32mstatic[m [1m[32mvoid[m
free_key_values([1m[32mstruct[m KeyValue *keyValues)
{
  [1m[36m//go thru chain of keyValues[m
  [1m[32mstruct[m KeyValue *p;
  [1m[33mwhile[m (p != [1m[35mNULL[m;) {
    p = keyValues;
    keyValues = keyValues->succ;
    free(p); [1m[36m//free KeyValue struct[m
    free(([1m[32mchar[m *)p->key);
  }
}

[1m[36m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *
make_key_values([1m[32mvoid[m) {
  [1m[32mconst[m [1m[32mchar[m *keys[] = {
    [1m[35m"twas"[m, [1m[35m"brillig"[m, [1m[35m"and"[m, [1m[35m"the"[m, [1m[35m"slithy"[m, [1m[35m"toves"[m,
    [1m[35m"did"[m, [1m[35m"gyre"[m, [1m[35m"and"[m, [1m[35m"gimble"[m, [1m[35m"in"[m, [1m[35m"the"[m, [1m[35m"wabe"[m,
    [1m[35m"all"[m, [1m[35m"mimsy"[m, [1m[35m"were"[m, [1m[35m"the"[m, [1m[35m"borogoves"[m,
    [1m[35m"and"[m, [1m[35m"the"[m, [1m[35m"mome"[m, [1m[35m"raths"[m, [1m[35m"outgrabe"[m,
  };
  [1m[32mstruct[m KeyValue *p = [1m[35mNULL[m;
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < [1m[33msizeof[m(keys)/[1m[33msizeof[m(keys[[1m[35m0[m]); i++) {
    p = add_key_value(p, keys[i], i);
  }[59;74H46,32[9C36%[38;32H[?25h[27m[23m[29m[m[H[2J[?25l[1;1H};

[1m[36m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *
add_key_value([1m[32mstruct[m KeyValue *keyValues, [1m[32mconst[m [1m[32mchar[m *k, [1m[32mint[m v)
{
  [1m[36m//allocate storage for new KeyValue struct[m
  [1m[32mstruct[m KeyValue *kv = malloc([1m[33msizeof[m([1m[32mstruct[m KeyValue));

  [1m[36m//allocate storage for string pointed to by k[m
  [1m[32mchar[m *s = malloc(strlen(k)+[1m[35m1[m);

  [1m[33mif[m (kv == [1m[35mNULL[m || s == [1m[35mNULL[m) { [1m[36m//check if allocations succeeded[m
    fprintf([1m[35mstderr[m, [1m[35m"malloc failure: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));
    exit([1m[35m1[m);
  }
  strcpy(s, k);  [1m[36m//copy string k into newly allocated memory pointed to by s

[m  [1m[36m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [1m[33mreturn[m kv;
}

[1m[36m/** Free all the key-value's in keyValues. */[m
[1m[32mstatic[m [1m[32mvoid[m
free_key_values([1m[32mstruct[m KeyValue *keyValues)
{
  [1m[36m//go thru chain of keyValues[m
  [1m[32mstruct[m KeyValue *p;
  [1m[33mwhile[m (p != [1m[35mNULL[m;) {
    p = keyValues;
    keyValues = keyValues->succ;
    free(p); [1m[36m//free KeyValue struct[m
    free(([1m[32mchar[m *)p->key);
  }
}

[1m[36m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *
make_key_values([1m[32mvoid[m) {
  [1m[32mconst[m [1m[32mchar[m *keys[] = {
    [1m[35m"twas"[m, [1m[35m"brillig"[m, [1m[35m"and"[m, [1m[35m"the"[m, [1m[35m"slithy"[m, [1m[35m"toves"[m,
    [1m[35m"did"[m, [1m[35m"gyre"[m, [1m[35m"and"[m, [1m[35m"gimble"[m, [1m[35m"in"[m, [1m[35m"the"[m, [1m[35m"wabe"[m,
    [1m[35m"all"[m, [1m[35m"mimsy"[m, [1m[35m"were"[m, [1m[35m"the"[m, [1m[35m"borogoves"[m,
    [1m[35m"and"[m, [1m[35m"the"[m, [1m[35m"mome"[m, [1m[35m"raths"[m, [1m[35m"outgrabe"[m,
  };
  [1m[32mstruct[m KeyValue *p = [1m[35mNULL[m;
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < [1m[33msizeof[m(keys)/[1m[33msizeof[m(keys[[1m[35m0[m]); i++) {[55;65H46,32[9C38%[36;32H[?25h[?25l[55;66H5,18[35;18H[?25h[?25l[55;66H7,10[37;10H[?25h[?25l[46m([mp[46m)[m[55;69H1[37;11H[?25h[?25l(p)[55;69H3[37;13H[?25h[?25l[55;68H35[37;35H[?25h[?25l[55;55H~@k[37;35H[55;55H   [37;34H[55;69H4[37;34H[?25h[?25l[55;55H~@k[37;34H[55;55H   [37;35H[55;69H5[37;35H[?25h[?25l[55;55Hi[37;35H[55;55H [37;35H[55;1H[1m-- INSERT --[m[55;65H[K[55;65H47,35[9C38%[37;35H[?25h[?25l[55;69H6[37;36H[?25h[?25l[37;35H[K[55;69H5[37;35H[?25h[?25l[37;34H[K[55;69H4[37;34H[?25h[?25l[37;33H[K[55;69H3[37;33H[?25h[?25l[37;32H[K[55;69H2[37;32H[?25h[?25l[37;31H[K[55;69H1[37;31H[?25h[?25l[37;30H[K[55;69H0[37;30H[?25h[?25l[37;29H[K[55;68H29[37;29H[?25h[?25l[37;28H[K[55;69H8[37;28H[?25h[?25l[37;27H[K[55;69H7[37;27H[?25h[?25l[37;26H[K[55;69H6[37;26H[?25h[?25l[37;25H[K[55;69H5[37;25H[?25h[?25l[37;24H[K[55;69H4[37;24H[?25h[?25l[37;23H[K[55;69H3[37;23H[?25h[?25l[37;22H[K[55;69H2[37;22H[?25h[?25l[37;21H[K[55;69H1[37;21H[?25h[?25l[37;20H[K[55;69H0[37;20H[?25h[?25l[37;19H[K[55;68H19[37;19H[?25h[?25l[37;18H[K[55;69H8[37;18H[?25h[?25l[37;17H[K[55;69H7[37;17H[?25h[?25l[37;16H[K[55;69H6[37;16H[?25h[?25l/[37;15H[K[55;69H5[37;15H[?25h[?25l[37;14H[K[55;69H4[37;14H[?25h[?25l[55;69H3[37;13H[?25h[?25l[37;12H[K[37;9H[46m([mp[46m)[m[55;69H2[37;12H[?25h[?25l[37;11H[K[37;9H([55;69H1[37;11H[?25h[?25l[37;10H[K[55;69H0[37;10H[?25h[?25l[37;9H[K[55;68H9 [37;9H[?25h[?25l[37;8H[K[55;68H8[37;8H[?25h[?25l[37;7H[K[55;68H7[37;7H[?25h[?25l[37;6H[K[55;68H6[37;6H[?25h[?25l[37;5H[K[55;68H5[37;5H[?25h[?25l[55;68H4[37;4H[?25h[?25l[55;68H3[37;3H[?25h[?25l[55;68H2[37;2H[?25h[?25l[55;68H1[37;1H[?25h[?25l[36;54r[54;1H
[1;55r[36;5HkeyValues = keyValues->succ;[54;5Hp = add_key_value(p, keys[i], i);[55;65H[K[55;65H46,33[9C40%[36;33H[?25h[?25l[55;66H7,26[37;26H[?25h[?25l[38;54r[38;1H[L[1;55r[55;65H[K[55;65H48,5[10C38%[38;5H[?25h[?25lf[55;68H6[38;6H[?25h[?25lr[55;68H7[38;7H[?25h[?25le[55;68H8[38;8H[?25h[?25le[55;68H9[38;9H[?25h[?25l([55;68H10[38;10H[?25h[?25lp[55;69H1[38;11H[?25h[?25l)[46m([mp[46m)[m[55;69H2[38;12H[?25h[?25l;(p)[55;69H3[38;13H[?25h[55;1H[K[38;12H[?25l[55;55H^[[38;12H[55;55H  [38;13H[55;65H48,12[9C38%[38;12H[?25h[?25l[55;55H:[38;12H[55;55H[K[55;1H:[?2004h[?25hw[?25l[?25hq[?25l[?25h[?25l[?1006l[?1002l[?2004l"bug-program.c" 80L, 2234C written[23;2t[23;1t[22;2t[22;1t[23;2t[23;1t
[?2004l[?1l>[?25h[?1049l[23;0;0trgeary1@remote00:~/i220a/submit/lab10/exercises/bug-program$ vim bug-program.calgrind -v --leak-check=yes ./bug-program 2>bug-program.valgrind
outgrabe: 22
raths: 21
mome: 20
the: 19
and: 18
borogoves: 17
the: 16
were: 15
mimsy: 14
all: 13
wabe: 12
the: 11
in: 10
gimble: 9
and: 8
gyre: 7
did: 6
toves: 5
slithy: 4
the: 3
and: 2
brillig: 1
twas: 0
Segmentation fault
rgeary1@remote00:~/i220a/submit/lab10/exercises/bug-program$ valgrind -v --leak-check=yes ./bug-program 2>bug-program.valgrind[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[4Pim bug-program.c
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
[?1000h[?2004h[?1049h[22;0;0t[?1h=[?2004h[1;55r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[55;1H"bug-program.c" 80L, 2234C[2;1Hâ–½[6n[2;1H  [1;1H[>c]10;?]11;?[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([33msizeof[m([32mstruct[m KeyValue));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k)+[31m1[m);

  [33mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [33mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [32mstruct[m KeyValue *p;
  [33mwhile[m (p != [31mNULL[m;) {
    p = keyValues;
    keyValues = keyValues->succ;
    free(([32mchar[m *)p->key);
    free(p);
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m[55;65H48,12[9CTop[48;12H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[27m[23m[29m[m[H[2J[?25l[1;1H[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m
[1m[34m#include [m[1m[35m<string.h>[m

[1m[36m/** A struct used to form a linear chain of key-value pairs. */[m
[1m[32mstruct[m KeyValue {
  [1m[32mconst[m [1m[32mchar[m *key;[7C[1m[36m/** string key */[m
  [1m[32mint[m value;[13C[1m[36m/** integer value */[m
  [1m[32mstruct[m KeyValue *succ; [1m[36m/** next key-value in chain */[m
};

[1m[36m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *
add_key_value([1m[32mstruct[m KeyValue *keyValues, [1m[32mconst[m [1m[32mchar[m *k, [1m[32mint[m v)
{
  [1m[36m//allocate storage for new KeyValue struct[m
  [1m[32mstruct[m KeyValue *kv = malloc([1m[33msizeof[m([1m[32mstruct[m KeyValue));

  [1m[36m//allocate storage for string pointed to by k[m
  [1m[32mchar[m *s = malloc(strlen(k)+[1m[35m1[m);

  [1m[33mif[m (kv == [1m[35mNULL[m || s == [1m[35mNULL[m) { [1m[36m//check if allocations succeeded[m
    fprintf([1m[35mstderr[m, [1m[35m"malloc failure: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));
    exit([1m[35m1[m);
  }
  strcpy(s, k);  [1m[36m//copy string k into newly allocated memory pointed to by s

[m  [1m[36m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [1m[33mreturn[m kv;
}

[1m[36m/** Free all the key-value's in keyValues. */[m
[1m[32mstatic[m [1m[32mvoid[m
free_key_values([1m[32mstruct[m KeyValue *keyValues)
{
  [1m[36m//go thru chain of keyValues[m
  [1m[32mstruct[m KeyValue *p;
  [1m[33mwhile[m (p != [1m[35mNULL[m;) {
    p = keyValues;
    keyValues = keyValues->succ;
    free(([1m[32mchar[m *)p->key);
    free(p);
  }
}

[1m[36m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m[55;65H48,12[9CTop"bug-program.c" 80L, 2234C[48;12H[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[55;66H3,20[43;20H[?25h[?25l[55;55Ht[43;20H[?25h[?25l[55;56Hi[43;20H[55;55H  [43;20H[?25h[?25l[55;55Ht[43;20H[?25h[?25l[55;55H [43;20H[?25h[?25l[55;55Hi[43;20H[55;55H [43;20H[55;1H[1m-- INSERT --[m[55;13H[K[55;65H43,20[9CTop[43;20H[?25h[?25ltp;[55;69H1[43;21H[?25h[?25l[44;9H[46m([10C)[m[55;66H4,10[44;10H[?25h[?25ltp != [1m[35mNULL[m[46m;[m) {[44;9H([10C;[55;69H1[44;11H[?25h[?25l[55;66H5,5 [45;5H[?25h[?25ltp = keyValues;[55;68H6[45;6H[?25h[?25l[47;10H[46m([6C)[m[55;66H7,17[47;17H[?25h[?25l[55;69H8[47;18H[?25h[?25ltp->key);[47;10H([6C)[55;69H9[47;19H[?25h[?25l[48;9H[46m([mp[46m)[m[55;66H8,10[48;10H[?25h[?25lt[46mp[m);(tp[55;69H1[48;11H[?25h[?25l[44;9H[46m([11C)[m[55;66H4,2[44;21H[?25h[?25l)[46m [m{[44;23H[K[44;20H[46m)[m [55;69H0[44;20H[?25h[?25l[44;9H([10C)[55;68H12[44;12H[?25h[?25l != [1m[35mNULL[m) {[44;22H[K[55;69H1[44;11H[?25h[?25l != [1m[35mNULL[m) {[44;21H[K[44;9H[46m([8C)[m[55;69H0[44;10H[?25h[?25lk != [1m[35mNUL[m[1m[35m[46mL[m) {[44;9H([8C[1m[35mL[m)[55;69H1[44;11H[?25h[?25le != [1m[35mNULL[m) {[55;69H2[44;12H[?25h[?25ly != [1m[35mNULL[m) {[55;69H3[44;13H[?25h[?25lV != [1m[35mNULL[m) {[55;69H4[44;14H[?25h[?25la != [1m[35mNULL[m) {[55;69H5[44;15H[?25h[?25ll != [1m[35mNULL[m) {[55;69H6[44;16H[?25h[?25lu != [1m[35mNULL[m) {[55;69H7[44;17H[?25h[?25le != [1m[35mNULL[m) {[55;69H8[44;18H[?25h[?25ls != [1m[35mNULL[m) {[55;69H9[44;19H[?25h[55;1H[K[44;18H[?25l[55;55H^[[44;18H[55;55H  [44;19H[55;65H44,18[9CTop[44;18H[?25h[?25l[55;55H:[44;18H[55;55H[K[55;1H:[?2004h[?25hw[?25l[?25hq[?25l[?25h[?25l[?1006l[?1002l[?2004l"bug-program.c" 80L, 2245C written[23;2t[23;1t[22;2t[22;1t[23;2t[23;1t
[?2004l[?1l>[?25h[?1049l[23;0;0trgeary1@remote00:~/i220a/submit/lab10/exercises/bug-program$ vim bug-program.calgrind -v --leak-check=yes ./bug-program 2>bug-program.valgrind[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[4Pim bug-program.c
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Kvim bug-program.c
[?1000h[?2004h[?1049h[22;0;0t[?1h=[?2004h[1;55r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[55;1H"bug-program.c" 80L, 2245C[2;1Hâ–½[6n[2;1H  [1;1H[>c]10;?]11;?[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([33msizeof[m([32mstruct[m KeyValue));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k)+[31m1[m);

  [33mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [33mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [32mstruct[m KeyValue *tp;
  [33mwhile[m (keyValues != [31mNULL[m) {
    tp = keyValues;
    keyValues = keyValues->succ;
    free(([32mchar[m *)tp->key);
    free(tp);
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m[55;65H44,18[9CTop[44;18H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[27m[23m[29m[m[H[2J[?25l[1;1H[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m
[1m[34m#include [m[1m[35m<string.h>[m

[1m[36m/** A struct used to form a linear chain of key-value pairs. */[m
[1m[32mstruct[m KeyValue {
  [1m[32mconst[m [1m[32mchar[m *key;[7C[1m[36m/** string key */[m
  [1m[32mint[m value;[13C[1m[36m/** integer value */[m
  [1m[32mstruct[m KeyValue *succ; [1m[36m/** next key-value in chain */[m
};

[1m[36m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *
add_key_value([1m[32mstruct[m KeyValue *keyValues, [1m[32mconst[m [1m[32mchar[m *k, [1m[32mint[m v)
{
  [1m[36m//allocate storage for new KeyValue struct[m
  [1m[32mstruct[m KeyValue *kv = malloc([1m[33msizeof[m([1m[32mstruct[m KeyValue));

  [1m[36m//allocate storage for string pointed to by k[m
  [1m[32mchar[m *s = malloc(strlen(k)+[1m[35m1[m);

  [1m[33mif[m (kv == [1m[35mNULL[m || s == [1m[35mNULL[m) { [1m[36m//check if allocations succeeded[m
    fprintf([1m[35mstderr[m, [1m[35m"malloc failure: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));
    exit([1m[35m1[m);
  }
  strcpy(s, k);  [1m[36m//copy string k into newly allocated memory pointed to by s

[m  [1m[36m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [1m[33mreturn[m kv;
}

[1m[36m/** Free all the key-value's in keyValues. */[m
[1m[32mstatic[m [1m[32mvoid[m
free_key_values([1m[32mstruct[m KeyValue *keyValues)
{
  [1m[36m//go thru chain of keyValues[m
  [1m[32mstruct[m KeyValue *tp;
  [1m[33mwhile[m (keyValues != [1m[35mNULL[m) {
    tp = keyValues;
    keyValues = keyValues->succ;
    free(([1m[32mchar[m *)tp->key);
    free(tp);
  }
}

[1m[36m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m[55;65H44,18[9CTop"bug-program.c" 80L, 2245C[44;18H[?25h[?25l[55;55H^[[44;18H[55;55H  [44;18H[55;55H^[[44;18H[55;55H  [44;18H[?25h[?25l[55;55H:[44;18H[55;1H[K[55;1H:[?2004h[?25hw[?25l[?25hq[?25l[?25h[?25l[?1006l[?1002l[?2004l"bug-program.c" 80L, 2245C written[23;2t[23;1t[22;2t[22;1t[23;2t[23;1t
[?2004l[?1l>[?25h[?1049l[23;0;0trgeary1@remote00:~/i220a/submit/lab10/exercises/bug-program$ vim bug-program.calgrind -v --leak-check=yes ./bug-program 2>bug-program.valgrind
outgrabe: 22
raths: 21
mome: 20
the: 19
and: 18
borogoves: 17
the: 16
were: 15
mimsy: 14
all: 13
wabe: 12
the: 11
in: 10
gimble: 9
and: 8
gyre: 7
did: 6
toves: 5
slithy: 4
the: 3
and: 2
brillig: 1
twas: 0
Segmentation fault
rgeary1@remote00:~/i220a/submit/lab10/exercises/bug-program$ valgrind -v --leak-check=yes ./bug-program 2>bug-program.valgrind[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[4Pim bug-program.c
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
[?1000h[?2004h[?1049h[22;0;0t[?1h=[?2004h[1;55r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[55;1H"bug-program.c" 80L, 2245C[2;1Hâ–½[6n[2;1H  [1;1H[>c]10;?]11;?[1;1H[35m#include [m[31m<errno.h>[m
[35m#include [m[31m<stdio.h>[m
[35m#include [m[31m<stdlib.h>[m
[35m#include [m[31m<string.h>[m

[34m/** A struct used to form a linear chain of key-value pairs. */[m
[32mstruct[m KeyValue {
  [32mconst[m [32mchar[m *key;[7C[34m/** string key */[m
  [32mint[m value;[13C[34m/** integer value */[m
  [32mstruct[m KeyValue *succ; [34m/** next key-value in chain */[m
};

[34m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[32mstatic[m [32mstruct[m KeyValue *
add_key_value([32mstruct[m KeyValue *keyValues, [32mconst[m [32mchar[m *k, [32mint[m v)
{
  [34m//allocate storage for new KeyValue struct[m
  [32mstruct[m KeyValue *kv = malloc([33msizeof[m([32mstruct[m KeyValue));

  [34m//allocate storage for string pointed to by k[m
  [32mchar[m *s = malloc(strlen(k)+[31m1[m);

  [33mif[m (kv == [31mNULL[m || s == [31mNULL[m) { [34m//check if allocations succeeded[m
    fprintf([31mstderr[m, [31m"malloc failure: [m[35m%s\n[m[31m"[m, strerror(errno));
    exit([31m1[m);
  }
  strcpy(s, k);  [34m//copy string k into newly allocated memory pointed to by s

[m  [34m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [33mreturn[m kv;
}

[34m/** Free all the key-value's in keyValues. */[m
[32mstatic[m [32mvoid[m
free_key_values([32mstruct[m KeyValue *keyValues)
{
  [34m//go thru chain of keyValues[m
  [32mstruct[m KeyValue *tp;
  [33mwhile[m (keyValues != [31mNULL[m) {
    tp = keyValues;
    keyValues = keyValues->succ;
    free(([32mchar[m *)tp->key);
    free(tp);
  }
}

[34m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m[55;65H44,18[9CTop[44;18H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[27m[23m[29m[m[H[2J[?25l[1;1H[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m
[1m[34m#include [m[1m[35m<string.h>[m

[1m[36m/** A struct used to form a linear chain of key-value pairs. */[m
[1m[32mstruct[m KeyValue {
  [1m[32mconst[m [1m[32mchar[m *key;[7C[1m[36m/** string key */[m
  [1m[32mint[m value;[13C[1m[36m/** integer value */[m
  [1m[32mstruct[m KeyValue *succ; [1m[36m/** next key-value in chain */[m
};

[1m[36m/** Given some chain keyValues of key-value struct's, add the
 *  key-value (k, v) at head of chain keyValues and return the
 *  resulting chain.
 */[m
[1m[32mstatic[m [1m[32mstruct[m KeyValue *
add_key_value([1m[32mstruct[m KeyValue *keyValues, [1m[32mconst[m [1m[32mchar[m *k, [1m[32mint[m v)
{
  [1m[36m//allocate storage for new KeyValue struct[m
  [1m[32mstruct[m KeyValue *kv = malloc([1m[33msizeof[m([1m[32mstruct[m KeyValue));

  [1m[36m//allocate storage for string pointed to by k[m
  [1m[32mchar[m *s = malloc(strlen(k)+[1m[35m1[m);

  [1m[33mif[m (kv == [1m[35mNULL[m || s == [1m[35mNULL[m) { [1m[36m//check if allocations succeeded[m
    fprintf([1m[35mstderr[m, [1m[35m"malloc failure: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));
    exit([1m[35m1[m);
  }
  strcpy(s, k);  [1m[36m//copy string k into newly allocated memory pointed to by s

[m  [1m[36m//initialize fields of *kv.[m
  kv->key = s; kv->value = v; kv->succ = keyValues;

  [1m[33mreturn[m kv;
}

[1m[36m/** Free all the key-value's in keyValues. */[m
[1m[32mstatic[m [1m[32mvoid[m
free_key_values([1m[32mstruct[m KeyValue *keyValues)
{
  [1m[36m//go thru chain of keyValues[m
  [1m[32mstruct[m KeyValue *tp;
  [1m[33mwhile[m (keyValues != [1m[35mNULL[m) {
    tp = keyValues;
    keyValues = keyValues->succ;
    free(([1m[32mchar[m *)tp->key);
    free(tp);
  }
}

[1m[36m/** Make key-values for all the words in the first verse of Carroll's
 *  Jabberwocky with value being the index of the word.
 */[m[55;65H44,18[9CTop"bug-program.c" 80L, 2245C[44;18H[?25h[?25l[55;55H:[44;18H[55;1H[K[55;1H:[?2004h[?25hw[?25l[?25hq[?25l[?25h[?25l[?1006l[?1002l[?2004l"bug-program.c" 80L, 2245C written[23;2t[23;1t[22;2t[22;1t[23;2t[23;1t
[?2004l[?1l>[?25h[?1049l[23;0;0trgeary1@remote00:~/i220a/submit/lab10/exercises/bug-program$ make clean
rm -f *.o *~ bug-program
rgeary1@remote00:~/i220a/submit/lab10/exercises/bug-program$ make
cc -g -Wall -std=c11 -O1    bug-program.c   -o bug-program
rgeary1@remote00:~/i220a/submit/lab10/exercises/bug-program$ make cleanvim bug-program.calgrind -v --leak-check=yes ./bug-program 2>bug-program.valgrind
outgrabe: 22
raths: 21
mome: 20
the: 19
and: 18
borogoves: 17
the: 16
were: 15
mimsy: 14
all: 13
wabe: 12
the: 11
in: 10
gimble: 9
and: 8
gyre: 7
did: 6
toves: 5
slithy: 4
the: 3
and: 2
brillig: 1
twas: 0
rgeary1@remote00:~/i220a/submit/lab10/exercises/bug-program$ vim va[K[Kbug-program.b[Ka[Kvalgrind 
[?1000h[?2004h[?1049h[22;0;0t[?1h=[?2004h[1;55r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[55;1H"bug-program.valgrind" 103L, 8002C[2;1Hâ–½[6n[2;1H  [1;1H[>c]10;?]11;?[1;1H==3067397== Memcheck, a memory error detector
==3067397== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==3067397== Using Valgrind-3.14.0-353a3587bb-20181007X and LibVEX; rerun with -h ff[4;1Hor copyright info
==3067397== Command: ./bug-program
==3067397==
--3067397-- Valgrind options:
--3067397--    -v
--3067397--    --leak-check=yes
--3067397-- Contents of /proc/version:
--3067397--   Linux version 5.7.0-0.bpo.2-amd64 (debian-kernel@lists.debian.org) (([12;1Hgcc version 8.3.0 (Debian 8.3.0-6), GNU ld (GNU Binutils for Debian) 2.31.1) #1 SMM[13;1HP Debian 5.7.10-1~bpo10+1 (2020-07-30)
--3067397--
--3067397-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-avxx[16;1H-avx2-bmi
--3067397-- Page sizes: currently 4096, max supported 4096
--3067397-- Valgrind library directory: /usr/lib/x86_64-linux-gnu/valgrind
--3067397-- Reading syms from /import/linux/home1/rgeary1/projects/i220a/submit/laa[20;1Hb10/exercises/bug-program/bug-program
--3067397-- Reading syms from /lib/x86_64-linux-gnu/ld-2.28.so
--3067397--   Considering /usr/lib/debug/.build-id/f2/5dfd7b95be4ba386fd71080accaee[23;1H8c0732b711.debug ..
--3067397--   .. build-id is valid
--3067397-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-lii[26;1Hnux
--3067397--   Considering /usr/lib/debug/.build-id/32/2e77af97f403c3d34ff09edf60b00[28;1H89e72ec889.debug ..
--3067397--   .. build-id is valid
--3067397--    object doesn't have a dynamic symbol table
--3067397-- Scheduler: using generic scheduler lock implementation.
--3067397-- Reading suppressions file: /usr/lib/x86_64-linux-gnu/valgrind/default..[33;1Hsupp
==3067397== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-3067397-bb[35;1Hy-rgeary1-on-???
==3067397== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-3067397-bb[37;1Hy-rgeary1-on-???
==3067397== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-3067399[39;1H7-by-rgeary1-on-???
==3067397==
==3067397== TO CONTROL THIS PROCESS USING vgdb (which you probably
==3067397== don't want to do, unless you know exactly what you're doing,
==3067397== or are doing some strange experiment):
==3067397==   /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=3067397 ...cc[45;1Hommand...
==3067397==
==3067397== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==3067397==   /path/to/gdb ./bug-program
==3067397== and then give GDB the following command
==3067397==   target remote | /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb ---[51;1Hpid=3067397
==3067397== --pid is optional if only one valgrind process is running
==3067397==
--3067397-- REDIR: 0x401e2f0 (ld-linux-x86-64.so.2:strlen) redirected to 0x580c9ce[54;1H[1m[34m@@@                                                                               [m[55;65H1,1[11CTop[1;1H[?25h[?1000l[?1006h[?1002h[?1006l[?1002l[?1006h[?1002h[27m[23m[29m[m[H[2J[?25l[1;1H==3067397== Memcheck, a memory error detector
==3067397== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==3067397== Using Valgrind-3.14.0-353a3587bb-20181007X and LibVEX; rerun with -h ff[4;1Hor copyright info
==3067397== Command: ./bug-program
==3067397==
--3067397-- Valgrind options:
--3067397--    -v
--3067397--    --leak-check=yes
--3067397-- Contents of /proc/version:
--3067397--   Linux version 5.7.0-0.bpo.2-amd64 (debian-kernel@lists.debian.org) (([12;1Hgcc version 8.3.0 (Debian 8.3.0-6), GNU ld (GNU Binutils for Debian) 2.31.1) #1 SMM[13;1HP Debian 5.7.10-1~bpo10+1 (2020-07-30)
--3067397--
--3067397-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-avxx[16;1H-avx2-bmi
--3067397-- Page sizes: currently 4096, max supported 4096
--3067397-- Valgrind library directory: /usr/lib/x86_64-linux-gnu/valgrind
--3067397-- Reading syms from /import/linux/home1/rgeary1/projects/i220a/submit/laa[20;1Hb10/exercises/bug-program/bug-program
--3067397-- Reading syms from /lib/x86_64-linux-gnu/ld-2.28.so
--3067397--   Considering /usr/lib/debug/.build-id/f2/5dfd7b95be4ba386fd71080accaee[23;1H8c0732b711.debug ..
--3067397--   .. build-id is valid
--3067397-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-lii[26;1Hnux
--3067397--   Considering /usr/lib/debug/.build-id/32/2e77af97f403c3d34ff09edf60b00[28;1H89e72ec889.debug ..
--3067397--   .. build-id is valid
--3067397--    object doesn't have a dynamic symbol table
--3067397-- Scheduler: using generic scheduler lock implementation.
--3067397-- Reading suppressions file: /usr/lib/x86_64-linux-gnu/valgrind/default..[33;1Hsupp
==3067397== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-3067397-bb[35;1Hy-rgeary1-on-???
==3067397== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-3067397-bb[37;1Hy-rgeary1-on-???
==3067397== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-3067399[39;1H7-by-rgeary1-on-???
==3067397==
==3067397== TO CONTROL THIS PROCESS USING vgdb (which you probably
==3067397== don't want to do, unless you know exactly what you're doing,
==3067397== or are doing some strange experiment):
==3067397==   /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=3067397 ...cc[45;1Hommand...
==3067397==
==3067397== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==3067397==   /path/to/gdb ./bug-program
==3067397== and then give GDB the following command
==3067397==   target remote | /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb ---[51;1Hpid=3067397
==3067397== --pid is optional if only one valgrind process is running
==3067397==
--3067397-- REDIR: 0x401e2f0 (ld-linux-x86-64.so.2:strlen) redirected to 0x580c9ce[54;1H[1m[34m@@@                                                                               [m[55;65H1,1[11CTop"bug-program.valgrind" 103L, 8002C[1;1H[?25h[?25l[1;54r[1;1H[4M[1;55r[50;1H--3067397-- REDIR: 0x401e2f0 (ld-linux-x86-64.so.2:strlen) redirected to 0x580c9cee[51;1H2 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--3067397-- REDIR: 0x401e0d0 (ld-linux-x86-64.so.2:index) redirected to 0x580c9cfcc[53;1H (vgPlain_amd64_linux_REDIR_FOR_index)
--3067397-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-am[54;1H[1m[34m@@@                                                                               [m[55;1H[K[55;65H9,1[12C4%[6;1H[?25h[?25l[1;54r[1;1H[3M[1;55r[51;1H--3067397-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amm[52;1Hd64-linux.so
--3067397--   Considering /usr/lib/debug/.build-id/34/fbc4cdfbfce1bfc3d2e522a01a055[54;1H0bf724c930.debug ..[55;65H[K[55;65H11,1[11C9%[7;1H[?25h[?25l[1;54r[1;1H[3M[1;55r[52;1H--3067397--   .. build-id is valid
--3067397-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memchecc[54;1Hk-amd64-linux.so[55;65H[K[55;65H13,1[10C13%[7;1H[?25h[?25l[1;54r[1;1H[6M[1;55r[49;1H--3067397--   Considering /usr/lib/debug/.build-id/ca/bb7898ea982d936cbfadd70ae8311[50;1Hc6eb63623f.debug ..
--3067397--   .. build-id is valid
==3067397== WARNING: new redirection conflicts with existing -- ignoring it
--3067397--     old: 0x0401e2f0 (strlen[14C) R-> (0000.0) 0x580c9ce2 vgPP[54;1Hlain_amd64_linux_REDIR_FOR_strlen[55;65H[K[55;65H17,1[10C18%[6;1H[?25h[?25l[1;54r[1;1H[4M[1;55r[51;1H--3067397--     new: 0x0401e2f0 (strlen[14C) R-> (2007.0) 0x04838d80 strr[52;1Hlen
--3067397-- REDIR: 0x401ab10 (ld-linux-x86-64.so.2:strcmp) redirected to 0x4839e400[54;1H (strcmp)[55;65H[K[55;65H20,1[10C22%[7;1H[?25h[?25l[1;54r[1;1H[4M[1;55r[51;1H--3067397-- REDIR: 0x401e830 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x483d866[52;1H0 (mempcpy)
--3067397-- Reading syms from /lib/x86_64-linux-gnu/libc-2.28.so
--3067397--   Considering /usr/lib/debug/.build-id/18/b9a9a8c523e5cfe5b5d946d605d0[54;1H[1m[34m@@@                                                                               [m[55;65H[K[55;65H22,1[10C26%[6;1H[?25h[?25l[1;54r[1;1H[5M[1;55r[49;1H--3067397--   Considering /usr/lib/debug/.build-id/18/b9a9a8c523e5cfe5b5d946d605d00[50;1H9242f09798.debug ..
--3067397--   .. build-id is valid
--3067397-- REDIR: 0x4906f70 (libc.so.6:memmove) redirected to 0x482d1b0 (_vgnU_iff[53;1Hunc_wrapper)
--3067397-- REDIR: 0x4906160 (libc.so.6:strncpy) redirected to 0x482d1b0 (_vgnU_if[54;1H[1m[34m@@@                                                                               [m[55;65H[K[55;65H26,1[10C30%[7;1H[?25h[?25l[1;54r[1;1H[4M[1;55r[50;1H--3067397-- REDIR: 0x4906160 (libc.so.6:strncpy) redirected to 0x482d1b0 (_vgnU_iff[51;1Hunc_wrapper)
--3067397-- REDIR: 0x4907250 (libc.so.6:strcasecmp) redirected to 0x482d1b0 (_vgnUU[53;1H_ifunc_wrapper)
--3067397-- REDIR: 0x4905b70 (libc.so.6:strcat) redirected to 0x482d1b0 (_vgnU_ifu[54;1H[1m[34m@@@                                                                               [m[55;65H[K[55;65H28,1[10C34%[7;1H[?25h[?25l[1;54r[1;1H[6M[1;55r[48;1H--3067397-- REDIR: 0x4905b70 (libc.so.6:strcat) redirected to 0x482d1b0 (_vgnU_ifuu[49;1Hnc_wrapper)
--3067397-- REDIR: 0x4906190 (libc.so.6:rindex) redirected to 0x482d1b0 (_vgnU_ifuu[51;1Hnc_wrapper)
--3067397-- REDIR: 0x4908890 (libc.so.6:rawmemchr) redirected to 0x482d1b0 (_vgnU__[53;1Hifunc_wrapper)
--3067397-- REDIR: 0x4921230 (libc.so.6:wmemchr) redirected to 0x482d1b0 (_vgnU_if[54;1H[1m[34m@@@                                                                               [m[55;65H[K[55;65H33,1[10C39%[7;1H[?25h[?25l[1;54r[1;1H[3M[1;55r[51;1H--3067397-- REDIR: 0x4921230 (libc.so.6:wmemchr) redirected to 0x482d1b0 (_vgnU_iff[52;1Hunc_wrapper)
--3067397-- REDIR: 0x4920cd0 (libc.so.6:wcscmp) redirected to 0x482d1b0 (_vgnU_ifuu[54;1Hnc_wrapper)[55;65H[K[55;65H35,1[10C42%[6;1H[?25h[?25l[1;54r[1;1H[4M[1;55r[51;1H--3067397-- REDIR: 0x49070e0 (libc.so.6:mempcpy) redirected to 0x482d1b0 (_vgnU_iff[52;1Hunc_wrapper)
--3067397-- REDIR: 0x4906f10 (libc.so.6:bcmp) redirected to 0x482d1b0 (_vgnU_ifuncc[54;1H_wrapper)[55;65H[K[55;65H38,1[10C46%[6;1H[?25h[?25l[1;54r[1;1H[3M[1;55r[52;1H--3067397-- REDIR: 0x4906100 (libc.so.6:strncmp) redirected to 0x482d1b0 (_vgnU_iff[53;1Hunc_wrapper)
--3067397-- REDIR: 0x4905be0 (libc.so.6:strcmp) redirected to 0x482d1b0 (_vgnU_ifu[54;1H[1m[34m@@@                                                                               [m[55;65H[K[55;65H41,1[10C49%[7;1H[?25h[?25l[1;54r[1;1H[4M[1;55r[50;1H--3067397-- REDIR: 0x4905be0 (libc.so.6:strcmp) redirected to 0x482d1b0 (_vgnU_ifuu[51;1Hnc_wrapper)
--3067397-- REDIR: 0x4907040 (libc.so.6:memset) redirected to 0x482d1b0 (_vgnU_ifuu[53;1Hnc_wrapper)
--3067397-- REDIR: 0x4920ca0 (libc.so.6:wcschr) redirected to 0x482d1b0 (_vgnU_ifu[54;1H[1m[34m@@@                                                                               [m[55;65H[K[55;65H43,1[10C52%[7;1H[?25h[?25l[1;54r[1;1H[6M[1;55r[48;1H--3067397-- REDIR: 0x4920ca0 (libc.so.6:wcschr) redirected to 0x482d1b0 (_vgnU_ifuu[49;1Hnc_wrapper)
--3067397-- REDIR: 0x49060a0 (libc.so.6:strnlen) redirected to 0x482d1b0 (_vgnU_iff[51;1Hunc_wrapper)
--3067397-- REDIR: 0x4905c70 (libc.so.6:strcspn) redirected to 0x482d1b0 (_vgnU_iff[53;1Hunc_wrapper)
--3067397-- REDIR: 0x49072a0 (libc.so.6:strncasecmp) redirected to 0x482d1b0 (_vgn[54;1H[1m[34m@@@                                                                               [m[55;65H[K[55;65H46,1[10C56%[6;1H[?25h[?25l[1;54r[1;1H[5M[1;55r[49;1H--3067397-- REDIR: 0x49072a0 (libc.so.6:strncasecmp) redirected to 0x482d1b0 (_vgnn[50;1HU_ifunc_wrapper)
--3067397-- REDIR: 0x4905c40 (libc.so.6:strcpy) redirected to 0x482d1b0 (_vgnU_ifuu[52;1Hnc_wrapper)
--3067397-- REDIR: 0x49073e0 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x482d1bb[54;1H0 (_vgnU_ifunc_wrapper)[55;65H[K[55;65H50,1[10C60%[7;1H[?25h[?25l[1;54r[1;1H[4M[1;55r[51;1H--3067397-- REDIR: 0x49224d0 (libc.so.6:wcsnlen) redirected to 0x482d1b0 (_vgnU_iff[52;1Hunc_wrapper)
--3067397-- REDIR: 0x49061c0 (libc.so.6:strpbrk) redirected to 0x482d1b0 (_vgnU_iff[54;1Hunc_wrapper)[55;65H[K[55;65H52,1[10C64%[7;1H[?25h[?25l[1;54r[1;1H[6M[1;55r[49;1H--3067397-- REDIR: 0x4905ba0 (libc.so.6:index) redirected to 0x482d1b0 (_vgnU_ifunn[50;1Hc_wrapper)
--3067397-- REDIR: 0x4906070 (libc.so.6:strlen) redirected to 0x482d1b0 (_vgnU_ifuu[52;1Hnc_wrapper)
--3067397-- REDIR: 0x490d280 (libc.so.6:memrchr) redirected to 0x482d1b0 (_vgnU_iff[54;1Hunc_wrapper)[55;65H[K[55;65H55,1[10C68%[6;1H[?25h[?25l[1;54r[1;1H[5M[1;55r[50;1H--3067397-- REDIR: 0x49072f0 (libc.so.6:strcasecmp_l) redirected to 0x482d1b0 (_vgg[51;1HnU_ifunc_wrapper)
--3067397-- REDIR: 0x4906ee0 (libc.so.6:memchr) redirected to 0x482d1b0 (_vgnU_ifuu[53;1Hnc_wrapper)
--3067397-- REDIR: 0x4920db0 (libc.so.6:wcslen) redirected to 0x482d1b0 (_vgnU_ifu[54;1H[1m[34m@@@                                                                               [m[55;65H[K[55;65H58,1[10C71%[6;1H[?25h[?25l[1;54r[1;1H[5M[1;55r[49;1H--3067397-- REDIR: 0x4920db0 (libc.so.6:wcslen) redirected to 0x482d1b0 (_vgnU_ifuu[50;1Hnc_wrapper)
--3067397-- REDIR: 0x4906460 (libc.so.6:strspn) redirected to 0x482d1b0 (_vgnU_ifuu[52;1Hnc_wrapper)
--3067397-- REDIR: 0x4907220 (libc.so.6:stpncpy) redirected to 0x482d1b0 (_vgnU_iff[54;1Hunc_wrapper)[55;65H[K[55;65H61,1[10C75%[7;1H[?25h[?25l[1;54r[1;1H[6M[1;55r[49;1H--3067397-- REDIR: 0x49071f0 (libc.so.6:stpcpy) redirected to 0x482d1b0 (_vgnU_ifuu[50;1Hnc_wrapper)
--3067397-- REDIR: 0x49088c0 (libc.so.6:strchrnul) redirected to 0x482d1b0 (_vgnU__[52;1Hifunc_wrapper)
--3067397-- REDIR: 0x4907340 (libc.so.6:strncasecmp_l) redirected to 0x482d1b0 (_vv[54;1HgnU_ifunc_wrapper)[55;65H[K[55;65H64,1[10C78%[7;1H[?25h[?25l[1;54r[1;1H[6M[1;55r[49;1H--3067397-- REDIR: 0x49d9fa0 (libc.so.6:__strrchr_avx2) redirected to 0x4838790 (rr[50;1Hindex)
--3067397-- REDIR: 0x4902350 (libc.so.6:malloc) redirected to 0x4835710 (malloc)
--3067397-- REDIR: 0x491b100 (libc.so.6:__strcpy_sse2_unaligned) redirected to 0x44[53;1H838db0 (strcpy)
--3067397-- REDIR: 0x49d9db0 (libc.so.6:__strchrnul_avx2) redirected to 0x483d390[1m[34m@@@                                                                               [m[55;65H[K[55;65H67,1[10C82%[7;1H[?25h[?25l[1;54r[1;1H[6M[1;55r[48;1H--3067397-- REDIR: 0x49d9db0 (libc.so.6:__strchrnul_avx2) redirected to 0x483d390  [49;1H(strchrnul)
--3067397-- REDIR: 0x49da170 (libc.so.6:__strlen_avx2) redirected to 0x4838c60 (stt[51;1Hrlen)
--3067397-- REDIR: 0x49da690 (libc.so.6:__mempcpy_avx_unaligned_erms) redirected tt[53;1Ho 0x483d4a0 (mempcpy)
--3067397-- REDIR: 0x49029a0 (libc.so.6:free) redirected to 0x4836940 (free)[55;65H[K[55;65H70,1[10C88%[7;1H[?25h[?25l[1;54r[1;1H[6M[1;55r[49;1H==3067397==
==3067397== HEAP SUMMARY:
==3067397==     in use at exit: 0 bytes in 0 blocks
==3067397==   total heap usage: 47 allocs, 47 frees, 1,699 bytes allocated
==3067397==
==3067397== All heap blocks were freed -- no leaks are possible[55;65H[K[55;65H73,1[10C95%[7;1H[?25h[?25l[1;54r[1;1H[6M[1;55r[49;1H==3067397==
==3067397== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==3067397== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[1m[34m~                                                                                 [53;1H~                                                                                 [54;1H~                                                                                 [m[55;65H[K[55;65H76,1[10CBot[7;1H[?25h[?25l[1;54r[1;1H[6M[1;55r[49;1H[1m[34m~                                                                                 [50;1H~                                                                                 [51;1H~                                                                                 [52;1H~                                                                                 [53;1H~                                                                                 [54;1H~                                                                                 [m[55;65H[K[55;65H79,1[10CBot[7;1H[?25h[?25l[1;54r[1;1H[6M[1;55r[49;1H[1m[34m~                                                                                 [50;1H~                                                                                 [51;1H~                                                                                 [52;1H~                                                                                 [53;1H~                                                                                 [54;1H~                                                                                 [m[55;65H[K[55;65H82,1[10CBot[7;1H[?25h[?25l[1;54r[1;1H[6M[1;55r[49;1H[1m[34m~                                                                                 [50;1H~                                                                                 [51;1H~                                                                                 [52;1H~                                                                                 [53;1H~                                                                                 [54;1H~                                                                                 [m[55;65H[K[55;65H85,1[10CBot[7;1H[?25h[?25l[1;54r[1;1H[6M[1;55r[49;1H[1m[34m~                                                                                 [50;1H~                                                                                 [51;1H~                                                                                 [52;1H~                                                                                 [53;1H~                                                                                 [54;1H~                                                                                 [m[55;65H[K[55;65H88,1[10CBot[7;1H[?25h[?25l[1;54r[1;1H[6M[1;55r[49;1H[1m[34m~                                                                                 [50;1H~                                                                                 [51;1H~                                                                                 [52;1H~                                                                                 [53;1H~                                                                                 [54;1H~                                                                                 [m[55;65H[K[55;65H91,1[10CBot[6;1H[?25h[?25l[1;54r[1;1H[6L[1;55r[1;1H--3067397-- REDIR: 0x49071f0 (libc.so.6:stpcpy) redirected to 0x482d1b0 (_vgnU_ifuu[2;1Hnc_wrapper)
--3067397-- REDIR: 0x49088c0 (libc.so.6:strchrnul) redirected to 0x482d1b0 (_vgnU__[4;1Hifunc_wrapper)
--3067397-- REDIR: 0x4907340 (libc.so.6:strncasecmp_l) redirected to 0x482d1b0 (_vv[6;1HgnU_ifunc_wrapper)[55;65H[K[55;65H91,1[10CBot[12;1H[?25h[?25l[1;54r[1;1H[6L[1;55r[1;1H--3067397-- REDIR: 0x4920db0 (libc.so.6:wcslen) redirected to 0x482d1b0 (_vgnU_ifuu[2;1Hnc_wrapper)
--3067397-- REDIR: 0x4906460 (libc.so.6:strspn) redirected to 0x482d1b0 (_vgnU_ifuu[4;1Hnc_wrapper)
--3067397-- REDIR: 0x4907220 (libc.so.6:stpncpy) redirected to 0x482d1b0 (_vgnU_iff[6;1Hunc_wrapper)[55;65H[K[55;65H91,1[10CBot[18;1H[?25h[?25l[55;65H101,12[31;12H[?25h[?25l[55;55H2[32;14H[31;12H[7m  
==3067397== E[m[55;1H[1m-- VISUAL --[m[55;55H[K[55;55H2[32;14H[55;65H102,14[8CBot[32;14H[?25h[?25lR[7mR[m[55;70H5[32;15H[?25h[?25l[55;55H3[33;17H[32;15H[7mROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0) 
==3067397== ERRO[m[55;67H3,17[33;17H[?25h[?25lR[7mR[m[55;70H8[33;18H[?25h[?25l S[7m S[m[55;69H20[33;20H[?25h[?25lUMM[7mUMM[m[55;70H3[33;23H[?25h[?25lA[7mA[m[55;70H4[33;24H[?25h[?25lRY:[7mRY:[m[55;70H7[33;27H[?25h[?25l [7m [m[55;70H8[33;28H[?25h[?25l0[7m0[m[55;70H9[33;29H[?25h[?25l [7m [m[55;69H30[33;30H[?25h[?25ler[7mer[m[55;70H2[33;32H[?25h[?25lr[7mr[m[55;70H3[33;33H[?25h[?25lor[7mor[m[55;70H5[33;35H[?25h[?25ls[7ms[m[55;70H6[33;36H[?25h[?25l [7m [m[55;70H7[33;37H[?25h[?25lfrom[7mfrom[m[55;69H41[33;41H[?25h[?25l 0 [7m 0 [m[55;70H4[33;44H[?25h[?25lc[7mc[m[55;70H5[33;45H[?25h[?25lont[7mont[m[55;70H8[33;48H[?25h[?25le[7me[m[55;70H9[33;49H[?25h[?25lxts[7mxts[m[55;69H52[33;52H[?25h[?25l [7m [m[46m([20C)[m[55;70H3[33;53H[?25h[?25l[2C[7m(s[m[19C)[55;70H5[33;55H[?25h[?25luppr[7muppr[m[55;70H9[33;59H[?25h[?25le[7me[m[55;69H60[33;60H[?25h[?25lss[7mss[m[55;70H2[33;62H[?25h[?25le[7me[m[55;70H3[33;63H[?25h[?25l[?25h[?25ld[7md[m[55;70H4[33;64H[?25h[?25l: [7m: [m[55;70H6[33;66H[?25h[?25l0 f[7m0 f[m[55;70H9[33;69H[?25h[?25lr[7mr[m[55;69H70[33;70H[?25h[?25lom[7mom[m[55;70H2[33;72H[?25h[?25l [7m [m[55;70H3[33;73H[?25h[?25l0)[7m0)[m[55;70H5[33;75H[?25h[?25l[?25h[?25l[?25h[?25l[?25h[?25l[55;55H^[[33;75H[55;55H3 [33;75H[55;56H^[[33;75H[55;55H   [33;74H[31;12H [31;13H[K[32;1H==3067397== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)[32;75H[K[33;1H==3067397== ERROR SUMMARY: 0 errors from 0 contexts [46m([msuppressed: 0 from 0[46m)[m[55;1H[K[55;65H103,74[8CBot[33;74H[?25h[?25l[55;55H:[33;74H[55;55H[K[55;1H:[?2004h[?25hwq[?25l[?25h[?25l[?1006l[?1002l[?2004l"bug-program.valgrind" 103L, 8002C written[23;2t[23;1t[22;2t[22;1t[23;2t[23;1t
[?2004l[?1l>[?25h[?1049l[23;0;0trgeary1@remote00:~/i220a/submit/lab10/exercises/bug-program$ [Krgeary1@remote00:~/i220a/submit/lab10/exercises/bug-program$ [Krgeary1@remote00:~/i220a/submit/lab10/exercises/bug-program$ cd ..
rgeary1@remote00:~/i220a/submit/lab10/exercises$ cd ..
rgeary1@remote00:~/i220a/submit/lab10$ cd ..
rgeary1@remote00:~/i220a/submit$ cd ..
rgeary1@remote00:~/i220a$ git branch -l
[?1h=  lab1[m[m
* [32mlab10[m[m
  lab2[m[m
  lab3[m[m
  lab4[m[m
  lab5[m[m
  lab6[m[m
  lab7[m[m
  lab8[m[m
  lab9[m[m
  master[m[m
  prj1-sol[m[m
  prj2-sol[m[m
  prj3-sol[m[m
[K[?1l>rgeary1@remote00:~/i220a$ git checkout master
error: Your local changes to the following files would be overwritten by checkout:
	submit/lab10/exercises/bug-program/bug-program.c
Please commit your changes or stash them before you switch branches.
Aborting
rgeary1@remote00:~/i220a$ git add .
rgeary1@remote00:~/i220a$ git commit -m 'completing lab10'
[lab10 93518ec] completing lab10
 Committer: Ryan Geary <rgeary1@cs.binghamton.edu>
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly:

    git config --global user.name "Your Name"
    git config --global user.email you@example.com

After doing this, you may fix the identity used for this commit with:

    git commit --amend --reset-author

 4 files changed, 3124 insertions(+), 4 deletions(-)
 create mode 100644 submit/lab10/exercises/bug-program/bug-program.valgrind
 create mode 100644 submit/lab10/exercises/bug-program/bugprogram.valgrind
 create mode 100644 submit/lab10/lab10.LOG
rgeary1@remote00:~/i220a$ git push -u origin master
Branch 'master' set up to track remote branch 'master' from 'origin'.
Everything up-to-date
rgeary1@remote00:~/i220a$ git push -u origin mastercommit -m 'completing lab10'add .[Kcheckout master
Switched to branch 'master'
Your branch is up to date with 'origin/master'.
rgeary1@remote00:~/i220a$ git pull
Already up to date.
rgeary1@remote00:~/i220a$ git checkout lab10[K0
Switched to branch 'lab10'
Your branch is ahead of 'origin/lab10' by 1 commit.
  (use "git push" to publish your local commits)
rgeary1@remote00:~/i220a$ git